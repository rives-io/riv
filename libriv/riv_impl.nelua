## pragmas.unitname = ''

require 'string'
require 'linux'
require '.riv_types'
require '.riv_yield'
require '.riv_iocard'
require '.riv_prng'
require '.riv_util'
require '.riv_input'
require '.riv_audio'
require '.riv_video'
require '.riv_image'
require '.riv_sprite'
require '.riv_draw'
require '.riv_mem'

local riv_ctx: *riv_context <cexport>

global function riv_init(): void <cattribute'constructor',cexport>
  -- check addresses
  assert((@usize)(&riv.mmio_driver_header) == RIV_VADDR_MMIO_DRIVER, 'invalid RIV_VADDR_MMIO_DRIVER')
  assert((@usize)(&riv.mmio_device_header) == RIV_VADDR_MMIO_DEVICE, 'invalid RIV_VADDR_MMIO_DEVICE')
  assert((@usize)(&riv.time_ms) == RIV_VADDR_PUB_DRIVER, 'invalid RIV_VADDR_PUB_DRIVER')
  assert((@usize)(&riv.prng) == RIV_VADDR_PRV_DRIVER, 'invalid RIV_VADDR_PRV_DRIVER')
  assert((@usize)(&riv.incard) == RIV_VADDR_INCARD, 'invalid RIV_VADDR_INCARD')
  assert((@usize)(&riv.outcard) == RIV_VADDR_OUTCARD, 'invalid RIV_VADDR_OUTCARD')
  assert((@usize)(&riv.statecard) == RIV_VADDR_STATECARD, 'invalid RIV_VADDR_STATECARD')
  assert((@usize)(&riv.framebuffer) == RIV_VADDR_FRAMEBUFFER, 'invalid RIV_VADDR_FRAMEBUFFER')
  assert((@usize)(&riv.txbuffer) == RIV_VADDR_TXBUFFER, 'invalid RIV_VADDR_TXBUFFER')
  assert(#@riv_context <= RIV_SIZE_CONTEXT, 'invalid RIV_SIZE_CONTEXT')
  -- map riv memory
  local prot: cint = PROT_READ | PROT_WRITE
  local flags: cint = MAP_ANONYMOUS | MAP_SHARED | MAP_FIXED_NOREPLACE | MAP_POPULATE | MAP_HUGETLB
  assert(mmap(riv, RIV_SIZE_CONTEXT, prot, flags, -1, 0) == riv, 'riv mmap failed')
  riv_ctx = riv
  -- initialize all code in top scopes
  local function nelua_main(argc: cint, argv: *cstring): cint <cimport,nodecl> end
  nelua_main(0, nilptr)
  -- open yield device
  riv_yield_open()
  -- initialize driver
  riv.mmio_driver_header = {
    canary = RIV_CANARY_DRIVER,
    version = RIV_VERSION,
    features = 0,
    uuid = 0
  }
  riv.width = RIV_DEFAULT_WIDTH
  riv.height = RIV_DEFAULT_HEIGHT
  riv.target_fps = RIV_DEFAULT_TARGET_FPS
  riv.pixel_format = RIV_DEFAULT_PIXELFORMAT
  riv.quit_frame = (@uint64)(-1)
  -- init input
  riv_init_input()
  -- init video
  riv_init_video()
  -- init draw
  riv_init_draw()
  -- signal the we are about to start, the host may fill input card
  riv_yield(RIV_CONTROL_OPEN)
  --[[
  -- check if device is connected (this check cannot be present in the validator)
  if riv.yielding then
    assert(riv.mmio_device_header.canary == RIV_CANARY_DEVICE, 'RIV driver: unable to connect device MMIO')
    assert(riv.mmio_device_header.version == RIV_VERSION, 'RIV driver: unsupported RIV version')
    assert(riv.mmio_device_header.features == 0, 'RIV driver: unsupported features')
  end
  ]]
  -- act as connected
  riv.mmio_device_header.canary = RIV_CANARY_DEVICE
  riv.mmio_device_header.version = RIV_VERSION
  riv.mmio_device_header.features = 0
  -- retrieve input card from host
  riv_sync_incard()
  -- initialize prng
  riv_init_prng()
  -- retrieve event log from fd
  local replaylog_fd_str: string = getenv('RIV_REPLAYLOG_FD')
  if #replaylog_fd_str > 0 then
    riv.verifying = true
    local replaylog_fd: int32 = replaylog_fd_str.data[0] - '0'_b
    local replaylog_size: isize = lseek(replaylog_fd, 0, SEEK_END)
    assert(replaylog_size >= #@riv_key_toggle_event, 'invalid replay log fd size')
    local replaylog_ptr: pointer = mmap(nilptr, (@usize)(replaylog_size), PROT_READ, MAP_SHARED, replaylog_fd, 0)
    assert(replaylog_ptr ~= MAP_FAILED, 'replay log fd mmap failed')
    riv.verify_key_events = (@*[0]riv_key_toggle_event)(replaylog_ptr)
  end
  -- retrieve stop frame
  local stop_frame_str: string = getenv('RIV_STOP_FRAME')
  if #stop_frame_str > 0 then
    riv.stop_frame = (@uint64)(tointeger(stop_frame_str))
  else
    riv.stop_frame = (@uint64)(-1)
  end
  -- finished successfully
  riv.valid = true
end

global function riv_deinit(): void
  -- ignore when not initialized
  if not riv.valid then return end
  -- save screenshot if needed
  riv_save_screenshot_fd()
  -- copy outcard description to driver
  riv_sync_outcard(true)
  -- tell the host we finished, the host may copy outcard
  riv_yield(RIV_CONTROL_CLOSE)
  -- close yield device
  riv_yield_close()
  riv.valid = false
  riv_ctx = nilptr
end

global function riv_fini(): void <cattribute'destructor',cexport>
  riv_deinit()
  -- unmap shared memory
  assert(munmap(riv, RIV_SIZE_CONTEXT) == 0, 'riv munmap failed')
end

global function riv_get_context(): *riv_context <cexport>
  return riv_ctx
end

global function riv_present(): boolean <cexport>
  -- force exit when replay ends
  if riv.verifying then
    local event: riv_key_toggle_event = riv.verify_key_events[riv.verify_key_event_index]
    if event.key_code == 0xff and riv.frame >= event.frame + 1 then
      riv_deinit()
      exit(0)
      return false
    end
  end
  -- copy outcard description to driver
  riv_sync_outcard(false)
  -- reset keyboard inputs before the device fill it
  riv_reset_inputs()
  -- present
  riv_yield(RIV_CONTROL_PRESENT)
  -- should we stop?
  if riv.frame >= riv.stop_frame then
    riv_deinit()
    exit(0)
    return false
  end
  -- fill with replay inputs
  if riv.verifying then
    local key_index: uint32 = 0
    while riv.verify_key_event_index ~= 0xffffffff do
      local event: riv_key_toggle_event = riv.verify_key_events[riv.verify_key_event_index]
      if event.frame ~= riv.frame or event.key_code == 0xff then break end
      riv.verify_key_event_index = riv.verify_key_event_index + 1
      if key_index < (@uint32)(#riv.key_toggles) then
        riv.key_toggles[key_index] = event.key_code
        key_index = key_index + 1
      end
    end
    riv.key_toggle_count = key_index
  end
  -- advance frame
  local frame: uint64 = riv.frame + 1
  riv.frame = frame
  -- update time trackers
  -- TODO: clock can skew with target_fps changes, this could be detected
  local target_fps: uint64 = riv.target_fps > 0 and riv.target_fps or RIV_DEFAULT_TARGET_FPS
  riv.time = frame / target_fps
  riv.time_ms = (@int64)((frame * 1000) // target_fps)
  -- audio commands was flushed
  riv.command_len = 0
  -- flush temporary string buffer
  riv.temp_str_off = 0
  -- poll keyboard inputs
  riv_poll_inputs()
  return not riv.quit and frame <= riv.quit_frame
end
