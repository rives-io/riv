## pragmas.unitname = ''

require '.riv_types'
require 'io'
require 'hashmap'
require 'math'
require 'C.stdio'
require 'C.stdlib'
require 'C.string'
require 'C.errno'

local function generate_image_id(): uint64
  local img_id: uint64 = riv.image_gen
  for i=0,<RIV_MAX_IMAGES do
    img_id = (img_id + 1) % RIV_MAX_IMAGES
    if img_id == 0 then img_id = 1 end
    if not riv.images[img_id].pixels then
      return img_id
    end
  end
  -- all image ids are in use
  return 0
end

local function rgb_distance2(a: uint32, b: uint32): int64 <inline>
  local dr: int64 = (@int64)((a >> 16) & 0xff) - (@int64)((b >> 16) & 0xff)
  local dg: int64 = (@int64)((a >>  8) & 0xff) - (@int64)((b >>  8) & 0xff)
  local db: int64 = (@int64)((a >>  0) & 0xff) - (@int64)((b >>  0) & 0xff)
  return dr*dr + dg*dg + db*db
end

local function get_rgba_to_plte_map(): hashmap(uint32, uint8)
  local rgba_to_plte_map: hashmap(uint32, uint8)
  local plte: *[RIV_MAX_COLORS]uint32 = &riv.palette[0]
  -- rgba -> plte mapping
  rgba_to_plte_map:reserve(32)
  for i: int64=RIV_MAX_COLORS-1,0,-1 do
    rgba_to_plte_map[plte[uint64(i)] & 0xffffff] = uint8(i)
  end
  return rgba_to_plte_map
end

local function convert_rgba_to_plte(pixels_rgba: *[0]uint32, pixels_plte: *[0]uint8, size: uint64, color_key: uint8): void
  local rgba_to_plte_map: hashmap(uint32, uint8) <close> = get_rgba_to_plte_map()
  local plte_size: uint64 = rgba_to_plte_map.size
  local plte: *[RIV_MAX_COLORS]uint32 = &riv.palette[0]
  -- convert rgba -> plte
  for i: uint64=0,<size do
    local rgba: uint32 = pixels_rgba[i]
    if rgba >> 24 == 0 then -- transparent
      pixels_plte[i] = color_key
    else
      rgba = rgba & 0xffffff
      local found: boolean, col: uint8 = rgba_to_plte_map:has_and_get(rgba)
      if not found then -- find nearest color in the palette
        local mind: int64 = rgb_distance2(rgba, plte[0])
        for j: uint64=1,<plte_size do
          local d: int64 = rgb_distance2(rgba, plte[j])
          if d < mind then
            mind = d
            col = (@uint8)(j)
          end
        end
        if rgba_to_plte_map.size < 4096 then
          rgba_to_plte_map[rgba] = col
        end
      end
      pixels_plte[i] = col
    end
  end
end

global function riv_make_image(filename: cstring <const>, color_key: int64): uint64 <cexport>
  -- generate image id
  local img_id: uint64 = generate_image_id()
  if img_id == 0 then
    io.stderr:writef('ERROR: unable to make image from file "%s": reached maximum number of images\n', filename)
    return 0
  end
  -- open file
  local file: *FILE = C.fopen(filename, 'rb')
  if not file then
    io.stderr:writef('ERROR: unable to make image %d from file "%s": %s\n', img_id, filename, C.strerror(C.errno))
    return 0
  end
  defer C.fclose(file) end
  -- create PNG context
  local ctx: *spng_ctx = spng_ctx_new(0)
  if not ctx then
    io.stderr:writef('ERROR: unable to make image %d from file "%s": failed to allocate PNG context\n', img_id, filename)
    return 0
  end
  defer spng_ctx_free(ctx) end
  -- set PNG file
  local spngerr: cint = spng_set_png_file(ctx, file)
  if spngerr ~= 0 then
    io.stderr:writef('ERROR: unable to make image %d from file "%s": %s\n', img_id, filename, spng_strerror(spngerr))
    return 0
  end
  -- get image width/height
  local ihdr: spng_ihdr
  spngerr = spng_get_ihdr(ctx, &ihdr)
  if spngerr ~= 0 then
    io.stderr:writef('ERROR: unable to make image %d from file "%s": %s\n', img_id, filename, spng_strerror(spngerr))
    return 0
  end
  if ihdr.width <= 0 or ihdr.height <= 0 or ihdr.width > 0xffff or ihdr.height > 0xffff then
    io.stderr:writef('ERROR: unable to make image %d from file "%s": width=%d or height=%d out of supported bounds\n', img_id, filename, ihdr.width, ihdr.height)
    return 0
  end
  -- allocate pixel buffers
  local num_pixels: usize = ihdr.width*ihdr.height
  local size_rgba: usize = num_pixels*4
  local pixels_rgba: *[0]uint32 = (@*[0]uint32)(C.malloc(size_rgba))
  if not pixels_rgba then
    io.stderr:writef('ERROR: unable to make image %d from file "%s": out of memory\n', img_id, filename)
    return 0
  end
  defer C.free(pixels_rgba) end
  local pixels_plte: *[0]uint8 = (@*[0]uint8)(C.malloc(num_pixels))
  if not pixels_plte then
    io.stderr:writef('ERROR: unable to make image %d from file "%s": out of memory\n', img_id, filename)
    return 0
  end
  -- decode image
  spngerr = spng_decode_image(ctx, pixels_rgba, size_rgba, SPNG_FMT_RGBA8, SPNG_DECODE_TRNS)
  if spngerr ~= 0 then
    io.stderr:writef('ERROR: unable to make image %d from file "%s": %s\n', img_id, filename, spng_strerror(spngerr))
    C.free(pixels_plte)
    return 0
  end
  convert_rgba_to_plte(pixels_rgba, pixels_plte, num_pixels, (@uint8)(math.clamp(color_key, 0, RIV_MAX_COLORS-1)))
  -- set image
  local img: *riv_image = &riv.images[img_id]
  img.pixels = pixels_plte
  img.width = (@uint16)(ihdr.width)
  img.height = (@uint16)(ihdr.height)
  img.color_key = (@int16)(color_key)
  img.owned = true
  riv.image_gen = img_id
  return img_id
end

global function riv_destroy_image(img_id: uint64): void <cexport>
  if img_id == 0 or img_id >= RIV_MAX_IMAGES then return end
  local img: *riv_image = &riv.images[img_id]
  if img.owned and img.pixels ~= nilptr then
    C.free(img.pixels)
  end
  $img = {}
end

global function riv_load_palette(filename: cstring <const>, start_col: uint8): uint32 <cexport>
  -- open file
  local file: *FILE = C.fopen(filename, 'rb')
  if not file then
    io.stderr:writef('ERROR: unable to load palette from file "%s": %s\n', filename, C.strerror(C.errno))
    return 0
  end
  defer C.fclose(file) end
  -- create PNG context
  local ctx: *spng_ctx = spng_ctx_new(0)
  if not ctx then
    io.stderr:writef('ERROR: unable to load palette from file "%s": failed to allocate PNG context\n', filename)
    return 0
  end
  defer spng_ctx_free(ctx) end
  -- set PNG file
  local spngerr: cint = spng_set_png_file(ctx, file)
  if spngerr ~= 0 then
    io.stderr:writef('ERROR: unable to load palette from file "%s": %s\n', filename, spng_strerror(spngerr))
    return 0
  end
  -- load plte
  local plte: spng_plte
  if spng_get_plte(ctx, &plte) ~= 0 then
    io.stderr:writef('ERROR: unable to load palette from file "%s": %s\n', filename, spng_strerror(spngerr))
    return 0
  end
  -- load colors
  local rgba_to_plte_map: hashmap(uint32, uint8) <close> = get_rgba_to_plte_map()
  local col: uint32 = start_col
  for i: uint32=0,<plte.n_entries do
    if col >= RIV_MAX_COLORS then
      io.stderr:writef('WARNING: reached maximum amount of colors while loading palette from file "%s"\n', filename, spng_strerror(spngerr))
      break
    end
    local rgba: uint32 = ((@uint32)(plte.entries[i].blue ) << 16) |
                         ((@uint32)(plte.entries[i].green) << 8) |
                         ((@uint32)(plte.entries[i].red  ) << 0)
    if not rgba_to_plte_map:has(rgba) then
      riv.palette[col] = rgba
      col = col + 1
    end
  end
  return col - start_col
end

global function riv_get_image_bbox(img_id: uint64, sx0: int64, sy0: int64, w: int64, h: int64): riv_recti <cexport>
  if img_id == 0 or img_id >= RIV_MAX_IMAGES or w <= 0 or h <= 0 then return (@riv_recti){sx0, sy0, 0, 0} end
  local img: *riv_image = &riv.images[img_id]
  if img.width == 0 or img.height == 0 or not img.pixels then return (@riv_recti){sx0, sy0, 0, 0} end
  local pitch: int64 = img.width
  local color_key: int64 = img.color_key
  local minx: int64 = sx0+w-1
  local miny: int64 = sy0+h-1
  local maxx: int64 = sx0-1
  local maxy: int64 = sy0-1
  local pixels: *[0]uint8 = &img.pixels[0]
  for y: int64=math.max(sy0,0),<math.min(sy0+h,img.height) do
    for x: int64=math.max(sx0,0),<math.min(sx0+w,img.width) do
      if pixels[y*pitch + x] ~= color_key then
        if x < minx then minx = x end
        if y < miny then miny = y end
        if x > maxx then maxx = x end
        if y > maxy then maxy = y end
      end
    end
  end
  local bw: int64 = math.max(maxx - minx + 1, 0)
  local bh: int64 = math.max(maxy - miny + 1, 0)
  if bw <= 0 or bh <= 0 then return (@riv_recti){sx0, sy0, 0, 0} end
  return (@riv_recti){minx, miny, bw, bh}
end
