require 'memory'
require 'allocators.default'

## pragmas.unitname = ''

## local function fast_memset_impl(chunk_size)
  -- fill head and tail with minimal branching
  if n == 0 then return end
  s[0] = c
  s[n-1] = c
  if n <= 2 then return end
  s[1] = c
  s[n-2] = c
  s[2] = c
  s[n-3] = c
  if n <= 6 then return end
  s[3] = c
  s[n-4] = c
  s[4] = c
  s[n-5] = c
  s[5] = c
  s[n-6] = c
  s[6] = c
  s[n-7] = c
  if n <= 14 then return end
  -- align to 8 bytes
  local k: uint64 = -(@usize)(s) & 7_u64
  s = &s[k]
  n = (n - k) & -8_u64
  -- set large chunks
  local c8: uint64 = 0x0101010101010101_u64 * c
  while n >= #[chunk_size]# do
    local s8: *[0]uint64 = (@*[0]uint64)(&s[n - #[chunk_size]#])
    ## for j=0,chunk_size//8-1 do
      s8[#[j]#] = c8
    ## end
    n = n - #[chunk_size]#
  end
  -- set trailing chunks
  ## local w = chunk_size
  ## repeat
    ## w = w // 2
    if n >= #[w]# then
      local s8: *[0]uint64 = (@*[0]uint64)(&s[n - #[w]#])
      ## for j=0,w//8-1 do
        s8[#[j]#] = c8
      ## end
      n = n - #[w]#
    end
  ## until w == 8
## end

global function riv_memset_large(s: *[0]uint8, c: uint8, n: uint64): void <inline>
  ## fast_memset_impl(256)
end

global function riv_memset_small(s: *[0]uint8, c: uint8, n: uint64): void <inline>
  ## fast_memset_impl(32)
end

## local function addr_to_ptr(a)
  in (@pointer)((@usize)(#[a]#))
## end

## local function ptr_to_addr(a)
  in (@uint64)((@usize)(#[a]#))
## end

global function riv_mempeek(addr: uint64, size: uint64): uint64 <cexport>
  local value: uint64
  memory.copy(&value, addr_to_ptr!(addr), math.min(size, 8))
  return value
end

global function riv_mempoke(addr: uint64, value: uint64, size: uint64): void <cexport>
  memory.copy(addr_to_ptr!(addr), &value, math.min(size, 8))
end

global function riv_memset(addr: uint64, value: uint8, size: uint64): void <cexport>
  memory.set(addr_to_ptr!(addr), value, size)
end

global function riv_memmove(dest_addr: uint64, src_addr: uint64, size: uint64): void <cexport>
  memory.move(addr_to_ptr!(dest_addr), addr_to_ptr!(src_addr), size)
end

global function riv_memscan(addr: uint64, value: uint8, size: uint64): uint64 <cexport>
  return ptr_to_addr!(memory.scan(addr_to_ptr!(addr), value, size))
end

global function riv_memcmp(addr1: uint64, addr2: uint64, size: uint64): int32 <cexport>
  return memory.compare(addr_to_ptr!(addr1), addr_to_ptr!(addr2), size)
end

global function riv_memalloc(size: uint64): uint64 <cexport>
  return ptr_to_addr!(default_allocator:alloc0(size))
end

global function riv_memrealloc(addr: uint64, new_size: uint64, old_size: uint64): uint64 <cexport>
  return ptr_to_addr!(default_allocator:realloc0(addr_to_ptr!(addr), new_size, old_size))
end

global function riv_memdealloc(addr: uint64): void <cexport>
  default_allocator:dealloc(addr_to_ptr!(addr))
end
