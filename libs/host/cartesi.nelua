##[[
cinclude 'machine-c-api.h'
if CARTESI_STATIC then
  if ccinfo.is_macos then
    linklib 'cartesi'
    linklib 'c++'
  elseif ccinfo.is_wasm then
    linklib 'libcartesi.a'
  elseif ccinfo.is_windows then
    linklib 'libcartesi.a'
    linklib 'libstdc++.a'
    linklib 'ws2_32'
  elseif ccinfo.is_linux then
    linklib 'libcartesi.a'
    linklib 'libstdc++.a'
    linklib 'libslirp.a'
    linklib 'libglib-2.0.a'
  end
else
  linklib 'cartesi'
end
]]
global cm_constant: type <cimport,nodecl,using> = @enum(cint){
  CM_HASH_SIZE = 32,
  CM_TREE_LOG2_WORD_SIZE = 5,
  CM_TREE_LOG2_PAGE_SIZE = 12,
  CM_TREE_LOG2_ROOT_SIZE = 64
}
global cm_pma_constant: type <cimport,nodecl,using> = @enum(cuint){
  CM_PMA_CMIO_RX_BUFFER_START = 1610612736,
  CM_PMA_CMIO_RX_BUFFER_LOG2_SIZE = 21,
  CM_PMA_CMIO_TX_BUFFER_START = 1619001344,
  CM_PMA_CMIO_TX_BUFFER_LOG2_SIZE = 21,
  CM_PMA_RAM_START = 2147483648
}
global cm_error: type <cimport,nodecl,using> = @enum(cint){
  CM_ERROR_OK = 0,
  CM_ERROR_INVALID_ARGUMENT = -1,
  CM_ERROR_DOMAIN_ERROR = -2,
  CM_ERROR_LENGTH_ERROR = -3,
  CM_ERROR_OUT_OF_RANGE = -4,
  CM_ERROR_LOGIC_ERROR = -5,
  CM_ERROR_RUNTIME_ERROR = -6,
  CM_ERROR_RANGE_ERROR = -7,
  CM_ERROR_OVERFLOW_ERROR = -8,
  CM_ERROR_UNDERFLOW_ERROR = -9,
  CM_ERROR_REGEX_ERROR = -10,
  CM_ERROR_SYSTEM_ERROR = -11,
  CM_ERROR_BAD_TYPEID = -12,
  CM_ERROR_BAD_CAST = -13,
  CM_ERROR_BAD_ANY_CAST = -14,
  CM_ERROR_BAD_OPTIONAL_ACCESS = -15,
  CM_ERROR_BAD_WEAK_PTR = -16,
  CM_ERROR_BAD_FUNCTION_CALL = -17,
  CM_ERROR_BAD_ALLOC = -18,
  CM_ERROR_BAD_ARRAY_NEW_LENGTH = -19,
  CM_ERROR_BAD_EXCEPTION = -20,
  CM_ERROR_BAD_VARIANT_ACCESS = -21,
  CM_ERROR_EXCEPTION = -22,
  CM_ERROR_UNKNOWN = -23
}
global cm_break_reason: type <cimport,nodecl,using> = @enum(cint){
  CM_BREAK_REASON_FAILED = 0,
  CM_BREAK_REASON_HALTED = 1,
  CM_BREAK_REASON_YIELDED_MANUALLY = 2,
  CM_BREAK_REASON_YIELDED_AUTOMATICALLY = 3,
  CM_BREAK_REASON_YIELDED_SOFTLY = 4,
  CM_BREAK_REASON_REACHED_TARGET_MCYCLE = 5
}
global cm_uarch_break_reason: type <cimport,nodecl,using> = @enum(cint){
  CM_UARCH_BREAK_REASON_REACHED_TARGET_CYCLE = 0,
  CM_UARCH_BREAK_REASON_UARCH_HALTED = 1,
  CM_UARCH_BREAK_REASON_FAILED = 2
}
global cm_access_log_type: type <cimport,nodecl,using> = @enum(cint){
  CM_ACCESS_LOG_TYPE_ANNOTATIONS = 1,
  CM_ACCESS_LOG_TYPE_LARGE_DATA = 2
}
global cm_cmio_yield_command: type <cimport,nodecl,using> = @enum(cint){
  CM_CMIO_YIELD_COMMAND_AUTOMATIC = 0,
  CM_CMIO_YIELD_COMMAND_MANUAL = 1
}
global cm_cmio_yield_reason: type <cimport,nodecl,using> = @enum(cint){
  CM_CMIO_YIELD_AUTOMATIC_REASON_PROGRESS = 1,
  CM_CMIO_YIELD_AUTOMATIC_REASON_TX_OUTPUT = 2,
  CM_CMIO_YIELD_AUTOMATIC_REASON_TX_REPORT = 4,
  CM_CMIO_YIELD_MANUAL_REASON_RX_ACCEPTED = 1,
  CM_CMIO_YIELD_MANUAL_REASON_RX_REJECTED = 2,
  CM_CMIO_YIELD_MANUAL_REASON_TX_EXCEPTION = 4,
  CM_CMIO_YIELD_REASON_ADVANCE_STATE = 0,
  CM_CMIO_YIELD_REASON_INSPECT_STATE = 1
}
global cm_reg: type <cimport,nodecl,using> = @enum(cint){
  CM_REG_X0 = 0,
  CM_REG_X1 = 1,
  CM_REG_X2 = 2,
  CM_REG_X3 = 3,
  CM_REG_X4 = 4,
  CM_REG_X5 = 5,
  CM_REG_X6 = 6,
  CM_REG_X7 = 7,
  CM_REG_X8 = 8,
  CM_REG_X9 = 9,
  CM_REG_X10 = 10,
  CM_REG_X11 = 11,
  CM_REG_X12 = 12,
  CM_REG_X13 = 13,
  CM_REG_X14 = 14,
  CM_REG_X15 = 15,
  CM_REG_X16 = 16,
  CM_REG_X17 = 17,
  CM_REG_X18 = 18,
  CM_REG_X19 = 19,
  CM_REG_X20 = 20,
  CM_REG_X21 = 21,
  CM_REG_X22 = 22,
  CM_REG_X23 = 23,
  CM_REG_X24 = 24,
  CM_REG_X25 = 25,
  CM_REG_X26 = 26,
  CM_REG_X27 = 27,
  CM_REG_X28 = 28,
  CM_REG_X29 = 29,
  CM_REG_X30 = 30,
  CM_REG_X31 = 31,
  CM_REG_F0 = 32,
  CM_REG_F1 = 33,
  CM_REG_F2 = 34,
  CM_REG_F3 = 35,
  CM_REG_F4 = 36,
  CM_REG_F5 = 37,
  CM_REG_F6 = 38,
  CM_REG_F7 = 39,
  CM_REG_F8 = 40,
  CM_REG_F9 = 41,
  CM_REG_F10 = 42,
  CM_REG_F11 = 43,
  CM_REG_F12 = 44,
  CM_REG_F13 = 45,
  CM_REG_F14 = 46,
  CM_REG_F15 = 47,
  CM_REG_F16 = 48,
  CM_REG_F17 = 49,
  CM_REG_F18 = 50,
  CM_REG_F19 = 51,
  CM_REG_F20 = 52,
  CM_REG_F21 = 53,
  CM_REG_F22 = 54,
  CM_REG_F23 = 55,
  CM_REG_F24 = 56,
  CM_REG_F25 = 57,
  CM_REG_F26 = 58,
  CM_REG_F27 = 59,
  CM_REG_F28 = 60,
  CM_REG_F29 = 61,
  CM_REG_F30 = 62,
  CM_REG_F31 = 63,
  CM_REG_PC = 64,
  CM_REG_FCSR = 65,
  CM_REG_MVENDORID = 66,
  CM_REG_MARCHID = 67,
  CM_REG_MIMPID = 68,
  CM_REG_MCYCLE = 69,
  CM_REG_ICYCLEINSTRET = 70,
  CM_REG_MSTATUS = 71,
  CM_REG_MTVEC = 72,
  CM_REG_MSCRATCH = 73,
  CM_REG_MEPC = 74,
  CM_REG_MCAUSE = 75,
  CM_REG_MTVAL = 76,
  CM_REG_MISA = 77,
  CM_REG_MIE = 78,
  CM_REG_MIP = 79,
  CM_REG_MEDELEG = 80,
  CM_REG_MIDELEG = 81,
  CM_REG_MCOUNTEREN = 82,
  CM_REG_MENVCFG = 83,
  CM_REG_STVEC = 84,
  CM_REG_SSCRATCH = 85,
  CM_REG_SEPC = 86,
  CM_REG_SCAUSE = 87,
  CM_REG_STVAL = 88,
  CM_REG_SATP = 89,
  CM_REG_SCOUNTEREN = 90,
  CM_REG_SENVCFG = 91,
  CM_REG_ILRSC = 92,
  CM_REG_IFLAGS = 93,
  CM_REG_IUNREP = 94,
  CM_REG_CLINT_MTIMECMP = 95,
  CM_REG_PLIC_GIRQPEND = 96,
  CM_REG_PLIC_GIRQSRVD = 97,
  CM_REG_HTIF_TOHOST = 98,
  CM_REG_HTIF_FROMHOST = 99,
  CM_REG_HTIF_IHALT = 100,
  CM_REG_HTIF_ICONSOLE = 101,
  CM_REG_HTIF_IYIELD = 102,
  CM_REG_UARCH_X0 = 103,
  CM_REG_UARCH_X1 = 104,
  CM_REG_UARCH_X2 = 105,
  CM_REG_UARCH_X3 = 106,
  CM_REG_UARCH_X4 = 107,
  CM_REG_UARCH_X5 = 108,
  CM_REG_UARCH_X6 = 109,
  CM_REG_UARCH_X7 = 110,
  CM_REG_UARCH_X8 = 111,
  CM_REG_UARCH_X9 = 112,
  CM_REG_UARCH_X10 = 113,
  CM_REG_UARCH_X11 = 114,
  CM_REG_UARCH_X12 = 115,
  CM_REG_UARCH_X13 = 116,
  CM_REG_UARCH_X14 = 117,
  CM_REG_UARCH_X15 = 118,
  CM_REG_UARCH_X16 = 119,
  CM_REG_UARCH_X17 = 120,
  CM_REG_UARCH_X18 = 121,
  CM_REG_UARCH_X19 = 122,
  CM_REG_UARCH_X20 = 123,
  CM_REG_UARCH_X21 = 124,
  CM_REG_UARCH_X22 = 125,
  CM_REG_UARCH_X23 = 126,
  CM_REG_UARCH_X24 = 127,
  CM_REG_UARCH_X25 = 128,
  CM_REG_UARCH_X26 = 129,
  CM_REG_UARCH_X27 = 130,
  CM_REG_UARCH_X28 = 131,
  CM_REG_UARCH_X29 = 132,
  CM_REG_UARCH_X30 = 133,
  CM_REG_UARCH_X31 = 134,
  CM_REG_UARCH_PC = 135,
  CM_REG_UARCH_CYCLE = 136,
  CM_REG_UARCH_HALT_FLAG = 137,
  CM_REG_COUNT = 138,
  CM_REG_IFLAGS_PRV = 139,
  CM_REG_IFLAGS_X = 140,
  CM_REG_IFLAGS_Y = 141,
  CM_REG_IFLAGS_H = 142,
  CM_REG_HTIF_TOHOST_DEV = 143,
  CM_REG_HTIF_TOHOST_CMD = 144,
  CM_REG_HTIF_TOHOST_REASON = 145,
  CM_REG_HTIF_TOHOST_DATA = 146,
  CM_REG_HTIF_FROMHOST_DEV = 147,
  CM_REG_HTIF_FROMHOST_CMD = 148,
  CM_REG_HTIF_FROMHOST_REASON = 149,
  CM_REG_HTIF_FROMHOST_DATA = 150,
  CM_REG_UNKNOWN = 151
}
global cm_hash: type <cimport,nodecl> = @[32]uint8
global cm_machine: type <cimport,nodecl,forwarddecl> = @record{}
global function cm_get_last_error_message(): cstring <cimport,nodecl> end
global function cm_get_default_config(m: *cm_machine, config: *cstring): cm_error <cimport,nodecl> end
global function cm_get_reg_address(m: *cm_machine, reg: cm_reg, val: *uint64): cm_error <cimport,nodecl> end
global function cm_new(m: *cm_machine, new_m: **cm_machine): cm_error <cimport,nodecl> end
global function cm_is_empty(m: *cm_machine, yes: *boolean): cm_error <cimport,nodecl> end
global function cm_delete(m: *cm_machine): void <cimport,nodecl> end
global function cm_create(m: *cm_machine, config: cstring, runtime_config: cstring): cm_error <cimport,nodecl> end
global function cm_create_new(config: cstring, runtime_config: cstring, new_m: **cm_machine): cm_error <cimport,nodecl> end
global function cm_load(m: *cm_machine, dir: cstring, runtime_config: cstring): cm_error <cimport,nodecl> end
global function cm_load_new(dir: cstring, runtime_config: cstring, new_m: **cm_machine): cm_error <cimport,nodecl> end
global function cm_store(m: *cm_machine, dir: cstring): cm_error <cimport,nodecl> end
global function cm_destroy(m: *cm_machine): cm_error <cimport,nodecl> end
global function cm_set_runtime_config(m: *cm_machine, runtime_config: cstring): cm_error <cimport,nodecl> end
global function cm_get_runtime_config(m: *cm_machine, runtime_config: *cstring): cm_error <cimport,nodecl> end
global function cm_replace_memory_range(m: *cm_machine, start: uint64, length: uint64, shared: boolean, image_filename: cstring): cm_error <cimport,nodecl> end
global function cm_get_initial_config(m: *cm_machine, config: *cstring): cm_error <cimport,nodecl> end
global function cm_get_memory_ranges(m: *cm_machine, ranges: *cstring): cm_error <cimport,nodecl> end
global function cm_get_root_hash(m: *cm_machine, hash: *cm_hash): cm_error <cimport,nodecl> end
global function cm_get_proof(m: *cm_machine, address: uint64, log2_size: int32, proof: *cstring): cm_error <cimport,nodecl> end
global function cm_read_word(m: *cm_machine, address: uint64, val: *uint64): cm_error <cimport,nodecl> end
global function cm_read_reg(m: *cm_machine, reg: cm_reg, val: *uint64): cm_error <cimport,nodecl> end
global function cm_write_reg(m: *cm_machine, reg: cm_reg, val: uint64): cm_error <cimport,nodecl> end
global function cm_read_memory(m: *cm_machine, address: uint64, data: *uint8, length: uint64): cm_error <cimport,nodecl> end
global function cm_write_memory(m: *cm_machine, address: uint64, data: *uint8, length: uint64): cm_error <cimport,nodecl> end
global function cm_read_virtual_memory(m: *cm_machine, address: uint64, data: *uint8, length: uint64): cm_error <cimport,nodecl> end
global function cm_write_virtual_memory(m: *cm_machine, address: uint64, data: *uint8, length: uint64): cm_error <cimport,nodecl> end
global function cm_translate_virtual_address(m: *cm_machine, vaddr: uint64, paddr: *uint64): cm_error <cimport,nodecl> end
global function cm_read_mcycle(m: *cm_machine, val: *uint64): cm_error <cimport,nodecl> end
global function cm_read_iflags_X(m: *cm_machine, val: *boolean): cm_error <cimport,nodecl> end
global function cm_read_iflags_Y(m: *cm_machine, val: *boolean): cm_error <cimport,nodecl> end
global function cm_reset_iflags_Y(m: *cm_machine): cm_error <cimport,nodecl> end
global function cm_set_iflags_Y(m: *cm_machine): cm_error <cimport,nodecl> end
global function cm_read_iflags_H(m: *cm_machine, val: *boolean): cm_error <cimport,nodecl> end
global function cm_read_uarch_cycle(m: *cm_machine, val: *uint64): cm_error <cimport,nodecl> end
global function cm_read_uarch_halt_flag(m: *cm_machine, val: *boolean): cm_error <cimport,nodecl> end
global function cm_set_uarch_halt_flag(m: *cm_machine): cm_error <cimport,nodecl> end
global function cm_run(m: *cm_machine, mcycle_end: uint64, break_reason: *cm_break_reason): cm_error <cimport,nodecl> end
global function cm_run_uarch(m: *cm_machine, uarch_cycle_end: uint64, uarch_break_reason: *cm_uarch_break_reason): cm_error <cimport,nodecl> end
global function cm_reset_uarch(m: *cm_machine): cm_error <cimport,nodecl> end
global function cm_receive_cmio_request(m: *cm_machine, cmd: *uint8, reason: *uint16, data: *uint8, length: *uint64): cm_error <cimport,nodecl> end
global function cm_send_cmio_response(m: *cm_machine, reason: uint16, data: *uint8, length: uint64): cm_error <cimport,nodecl> end
global function cm_log_step_uarch(m: *cm_machine, log_type: int32, log: *cstring): cm_error <cimport,nodecl> end
global function cm_log_reset_uarch(m: *cm_machine, log_type: int32, log: *cstring): cm_error <cimport,nodecl> end
global function cm_log_send_cmio_response(m: *cm_machine, reason: uint16, data: *uint8, length: uint64, log_type: int32, log: *cstring): cm_error <cimport,nodecl> end
global function cm_verify_step_uarch(m: *cm_machine, root_hash_before: *cm_hash, log: cstring, root_hash_after: *cm_hash): cm_error <cimport,nodecl> end
global function cm_verify_reset_uarch(m: *cm_machine, root_hash_before: *cm_hash, log: cstring, root_hash_after: *cm_hash): cm_error <cimport,nodecl> end
global function cm_verify_send_cmio_response(m: *cm_machine, reason: uint16, data: *uint8, length: uint64, root_hash_before: *cm_hash, log: cstring, root_hash_after: *cm_hash): cm_error <cimport,nodecl> end
global function cm_verify_merkle_tree(m: *cm_machine, result: *boolean): cm_error <cimport,nodecl> end
global function cm_verify_dirty_page_maps(m: *cm_machine, result: *boolean): cm_error <cimport,nodecl> end
global CM_VERSION_LABEL: cstring <comptime> = "EMULATOR_VERSION_LABEL"
