-- This file contains code related to the video subsystem.

require 'math'
require 'sokol'
require 'miniz'
require 'spng'
require '.machine'

-- Video subsystem.
global rivemu_video = @record{}

-- Video subsystem state.
local fb_height: uint32
local fb_width: uint32
local fb_target_fps: uint32
local fb_pixel_format: riv_pixel_format
local fb_pixel_count: int64
local fb_image: sg_image
local fb_pixel_perfect: boolean
local framebuffer: [RIV_SIZE_FRAMEBUFFER]byte
local framebuffer_rgba: [RIV_SIZE_FRAMEBUFFER]uint32
local loading: boolean = false
local loading_start: float64 = 0

-- Destroy the window framebuffer image.
local function destroy_framebuffer_image(): void
  if sg_query_image_state(fb_image) == SG_RESOURCESTATE_VALID then
    sg_destroy_image(fb_image)
    fb_image = {}
  end
end

-- Reset video subsystem.
function rivemu_video.reset(): void
  destroy_framebuffer_image()
  fb_height = 0
  fb_width = 0
  fb_target_fps = 0
  fb_pixel_format = RIV_PIXELFORMAT_PLT256
  fb_pixel_count = 0
  memory.zero(&framebuffer[0], RIV_SIZE_FRAMEBUFFER)
  memory.zero(&framebuffer_rgba[0], RIV_SIZE_FRAMEBUFFER * 4)
  loading = false
end

-- Initialize video subsystem.
function rivemu_video.setup(pixel_perfect: boolean): void
  sg_setup(sg_desc{environment = sglue_environment(), logger = {func = slog_func}})
  assert(sg_isvalid(), 'failed to initialize Sokol GFX')
  sgp_setup(sgp_desc{})
  assert(sgp_is_valid(), 'failed to initialize SGP')
  fb_pixel_perfect = pixel_perfect
end

function rivemu_video.set_loading(enabled: boolean): void
  loading = enabled
  loading_start = os.now()
end

-- Terminate video subsystem.
function rivemu_video.shutdown(): void
  rivemu_video.reset()
  sgp_shutdown()
  sg_shutdown()
end

-- Resize the window framebuffer image.
local function update_framebuffer_size(): void
  -- update framebuffer desc
  if fb_width == machine.mmio_driver.width and
     fb_height == machine.mmio_driver.height and
     fb_target_fps == machine.mmio_driver.target_fps and
     fb_pixel_format == machine.mmio_driver.pixel_format then return end
  local recreate: boolean = fb_width ~= machine.mmio_driver.width or
                            fb_height ~= machine.mmio_driver.height
  fb_width = machine.mmio_driver.width
  fb_height = machine.mmio_driver.height
  fb_target_fps = machine.mmio_driver.target_fps
  fb_pixel_format = machine.mmio_driver.pixel_format
  fb_pixel_count = fb_width * fb_height

  -- return early if no resize is needed
  if not recreate then return end

  -- destroy current framebuffer
  destroy_framebuffer_image()

  -- no need to create an fb image when its size is 0
  if fb_width * fb_height == 0 then return end

  -- create the framebuffer
  fb_image = sg_make_image(sg_image_desc{
    usage = SG_USAGE_STREAM,
    width = fb_width,
    height = fb_height,
  })
  assert(sg_query_image_state(fb_image) == SG_RESOURCESTATE_VALID, "failed to create frame buffer image")
end

-- Update the framebuffer into host RAM memory.
local function update_framebuffer_mem(): void
  local pixel_count: int64 = machine.mmio_driver.width * machine.mmio_driver.height
  if pixel_count == 0 then return end
  local fb_machine_mem: span(byte) = {data=&framebuffer,size=pixel_count}
  machine:translate_and_read_virtual_memory(RIV_VADDR_FRAMEBUFFER, fb_machine_mem)
  for i: int64=0,<pixel_count do
    framebuffer_rgba[i] = machine.mmio_driver.palette[framebuffer[i]]
  end
end

-- Update the framebuffer into GPU memory.
local function update_framebuffer_video_mem(): void
  if fb_pixel_count == 0 then return end
  -- update the framebuffer pixels using palette
  sg_update_image(fb_image, sg_image_data{{{{ptr=&framebuffer_rgba, size=fb_pixel_count*4}}}})
end

-- Fit a box into another box while preserving aspect ratio.
local function fit_box(inner_width: int64, inner_height: int64, outer_width: int64, outer_height: int64, pixel_perfect: boolean): (int64, int64, int64, int64)
  local scale: float64 = 0
  if inner_height > 0 and inner_height > 0 then
    if inner_height*outer_width >= inner_width*outer_height then -- full vertical
      local ratio: float64 = pixel_perfect and (outer_height // inner_height) or (outer_height / inner_height)
      scale = (outer_height >= inner_height) and ratio or (outer_height / inner_height)
    else -- full horizontal
      local ratio: float64 = pixel_perfect and (outer_width // inner_width) or (outer_width / inner_width)
      scale = (outer_width >= inner_width) and ratio or (outer_width / inner_width)
    end
  end
  local width: int64, height: int64 = math.ifloor(inner_width * scale), math.ifloor(inner_height * scale)
  local x: int64, y: int64 = (outer_width - width) // 2, (outer_height - height) // 2
  return x, y, width, height
end

-- Draw the framebuffer into the window screen.
local function draw_framebuffer(screen_width: int64, screen_height: int64): void
  if fb_pixel_count == 0 then return end
  sgp_set_image(0, fb_image)
  sgp_draw_filled_rect(fit_box(fb_width, fb_height, screen_width, screen_height, fb_pixel_perfect))
  sgp_reset_image(0)
end

local function draw_intro_bg(screen_width: int64, screen_height: int64, t: float64): void
  local i: int64 = 0
  local l: int64 = screen_height//128
  local colors: [10]sgp_color = {
    {0.85, 0.15, 0.15, 1.0},
    {0.15, 0.15, 0.85, 1.0},
    {0.4, 0.4, 0.4, 1.0},
    {0.8, 0.8, 0.8, 1.0},
  }
  local is: int64 = int64(t * 8) % 2 * 2
  for y: int64=0,<screen_height,l do
    i = (i + 1) % 2
    local col: sgp_color = colors[is + i]
    sgp_set_color(col.r, col.g, col.b, col.a)
    sgp_draw_filled_rect(0, y, screen_width, l)
  end
end

local function draw_loading(screen_width: int64, screen_height: int64, t: float64): void
  local j: int64 = math.iround((math.abs(math.fract(t)*2 - 1)*2-1)*4)
  for i=-4,4 do
    local w: float32 = screen_width/16
    local h: float32 = screen_width/16
    if i == j then
      h = h * 2
      sgp_set_color(1.0, 1.0, 1.0, 1.0)
    else
      sgp_set_color(0.75, 0.75, 0.75, 1.0)
    end
    local x: float32 = screen_width/2 - i*w*1.5 - w/2
    local y: float32 = (screen_height - h)/2 + screen_height/4
    sgp_draw_filled_rect(x, y, w, h)
  end
  sgp_reset_color()
end

local function draw_pixels(pixels: string, x: int64, y: int64, pw: int64, ph: int64): void
  local ix: int64 = x
  local iy: int64 = y
  for i: int64=0,<#pixels do
    local c: byte = pixels.data[i]
    if c == '\n'_b then
      iy = iy + ph
      ix = x
    else
      if c == '#'_b then
        sgp_draw_filled_rect(ix, iy, pw, ph)
      end
      ix = ix + pw
    end
  end
end

local function draw_logo_fadein(screen_width: int64, screen_height: int64, t: float64): void
  local pw: int64 = screen_width//128
  local w: int64 = pw * 30
  local h: int64 = pw * 7
  local x: int64 = (screen_width - w)//2
  local y: int64 = (screen_height - h)//2-- - 1.75*screen_width/16
  local v: float64 = math.ifloor((math.min(t*4.0, 1.0))*8)/8
  sgp_set_color(v, v, v, 1.0)
  draw_pixels([[
##### ##### #   # #####  ####
#   #   #   #   # #     #
#   #   #   #   # #     #
####    #   #   # ####  #####
#   #   #   #   # #         #
#   #   #    # #  #         #
#   # #####   #   ##### ####
]], x, y, pw, pw)
end

local function draw_intro_loading(screen_width: int64, screen_height: int64, t: float64): void
  local t: float64 = os.now() - loading_start
  if t < 0.25 then
    draw_intro_bg(screen_width, screen_height, t)
    return
  end
  t = t - 0.25
  draw_logo_fadein(screen_width, screen_height, t)
  if t < 0.25 then return end
  t = t - 0.25
  draw_loading(screen_width, screen_height, t)
end

function rivemu_video.update_framebuffer()
  if not machine:is_mmio_ready() then return end
  update_framebuffer_size()
  update_framebuffer_mem()
end

function rivemu_video.present(): void
  update_framebuffer_video_mem()

  -- prepare for drawing
  local app_width: int32, app_height: int32 = sapp_width(), sapp_height()
  sgp_begin(app_width, app_height)
  sgp_viewport(0, 0, app_width, app_height)
  sgp_project(0, app_width, 0, app_height)

  if loading then
    -- draw intro + loading animation
    draw_intro_loading(app_width, app_height)
  else
    -- draw
    draw_framebuffer(app_width, app_height)
  end

  -- dispatch draw commands
  sg_begin_pass(sg_pass{
    swapchain = sglue_swapchain(),
    action = sg_pass_action{
      colors={{load_action=SG_LOADACTION_CLEAR, clear_value={r=0,g=0,b=0,a=1}}},
      depth={load_action=SG_LOADACTION_DONTCARE},
      stencil={load_action=SG_LOADACTION_DONTCARE}
    }
  })
  sgp_flush()
  sgp_end()
  sg_end_pass()
  sg_commit()
end

-- Encodes a screenshot from the current framebuffer to a PNG binary string.
local function riv_encode_png_screenshot(): string
  local width: uint32 = fb_width
  local height: uint32 = fb_height
  if fb_pixel_count == 0 then -- video was probably not initialized
    update_framebuffer_mem()
    width = machine.mmio_driver.width
    height = machine.mmio_driver.height
  end

  local ret: cint
  -- Creating an encoder context requires a flag
  local enc: *spng_ctx = spng_ctx_new(SPNG_CTX_ENCODER)
  assert(enc ~= nilptr, 'spng_ctx_new failed')
  defer spng_ctx_free(enc) end

  -- Encode to internal buffer managed by the library
  ret = spng_set_option(enc, SPNG_ENCODE_TO_BUFFER, 1)
  if ret ~= 0 then error('spng_set_option failed: '..spng_strerror(ret)) end

  -- Specify image dimensions, PNG format
  local ihdr: spng_ihdr = {
    width = width,
    height = height,
    bit_depth = 8,
    color_type = SPNG_COLOR_TYPE_INDEXED
  }

  -- Image will be encoded according to ihdr.color_type, .bit_depth
  ret = spng_set_ihdr(enc, &ihdr)
  if ret ~= 0 then error('spng_set_ihdr failed: '..spng_strerror(ret)) end

  -- Detect palette size
  local num_pixels: usize = width * height
  local num_colors: usize = 0
  for i: usize=0,<num_pixels do
    if framebuffer[i] > num_colors then num_colors = framebuffer[i] end
  end
  num_colors = num_colors + 1

  -- Set palette colors
  local plte: spng_plte = {n_entries = num_colors}
  for i: usize=0,<256 do
    plte.entries[i].red = (@uint8)((machine.mmio_driver.palette[i] >> 0) & 0xff)
    plte.entries[i].green = (@uint8)((machine.mmio_driver.palette[i] >> 8) & 0xff)
    plte.entries[i].blue = (@uint8)((machine.mmio_driver.palette[i] >> 16) & 0xff)
  end
  ret = spng_set_plte(enc, &plte)
  if ret ~= 0 then error('spng_set_plte failed: '..spng_strerror(ret)) end

  -- SPNG_FMT_PNG is a special value that matches the format in ihdr,
  -- SPNG_ENCODE_FINALIZE will finalize the PNG with the end-of-file marker
  ret = spng_encode_image(enc, &framebuffer, num_pixels, SPNG_FMT_PNG, SPNG_ENCODE_FINALIZE)
  if ret ~= 0 then error('spng_encode_image failed: '..spng_strerror(ret)) end

  -- PNG is written to an internal buffer by default
  ret = 0
  local png_size: usize
  local png: pointer = spng_get_png_buffer(enc, &png_size, &ret)
  if ret ~= 0 or png == nilptr then error('spng_get_png_buffer failed: '..spng_strerror(ret)) end

  return string{data=(@*[0]uint8)(png), size=png_size}
end

function rivemu_video.save_screenshot(filename: string): void
  local screenshot_data: string = riv_encode_png_screenshot()
  local file: filestream <close> = fn_assert!(io.open(filename, 'wb'))
  fn_assert!(file:write(screenshot_data))
  io.printf("[RIVEMU] Saved screenshot '%s'\n", filename)
end
