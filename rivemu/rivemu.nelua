-- This file contains the entry point for RIVEMU.

##[[
-- Riv emulator does not use garbage collection
pragma{nogc=true}

-- Allow requiring third party libraries
local projdir = fs.scriptdir(2)
libpath(fs.join(projdir, 'libriv', '?.nelua'))
libpath(fs.join(projdir, 'libs', 'host', '?.nelua'))
libpath(fs.join(projdir, 'libs', 'guest-host', '?.nelua'))
]]

global RIVEMU_VERSION_PATCH: int64 <const> = 0

require 'string'
require 'io'
require 'os'
require 'sokol'
require 'arg'
require 'C.stdlib'

global restart_requested: boolean
global quit_requested: boolean
global running_sapp: boolean
global exit_code: integer

global function rivemu_quit(): void
  quit_requested = true
  if running_sapp then
    sapp_quit()
  end
end

require '.printer'
require '.machine'
require '.audio'
require '.video'
require '.input'
require '.framelimiter'
require '.iocard'

local rivemu_options: type = @record{
  kernel_filename: string,
  rootfs_filename: string,
  workspace_directory: string,
  cartridge_filename: string,
  replay_filename: string,
  record_filename: string,
  verify_filename: string,
  verify_outhash: string,
  incard_filename: string,
  outcard_filename: string,
  outhist_filename: string,
  outhash_filename: string,
  screenshot_filename: string,
  init: string,
  entrypoint: string,
  args: string,
  user: string,
  workdir: string,
  env: string,
  hostname: string,
  bootargs: string,
  entropy: string,
  recording: boolean,
  replaying: boolean,
  verifying: boolean,
  interactive: boolean,
  persist: boolean,
  network: boolean,
  tracking_outhist: boolean,
  benchmarking: boolean,
  print_hash: boolean,
  pixel_perfect: boolean,
  no_window: boolean,
  no_yield: boolean,
  no_audio: boolean,
  no_video: boolean,
  no_loading: boolean,
  no_quit: boolean,
  wait_halt: boolean,
  print_frame_hash: boolean,
  print_final_hash: boolean,
  print_outcard: boolean,
  print_outhash: boolean,
  extract_info: boolean,
  quiet: boolean,
  speed: float64,
  mem: int64,
  stop_frame: int64,
}

local function parse_options(): rivemu_options
  local opts: rivemu_options = {
    mem = 256*1024*1024,
    speed = 1.0,
    stop_frame = -1,
  }
  local entrypoint_sb: stringbuilder <static>
  entrypoint_sb:clear()
  ## if ccinfo.is_emscripten then
  local argc: integer = sargs_num_args()
  local argi: integer = 0
  ## else
  local argc: integer = #arg + 1
  local argi: integer = 1
  ## end
  while argi < argc do
    ## if ccinfo.is_emscripten then
    local argk: string = sargs_key_at(argi)
    local argv: string = sargs_value_at(argi)
    ## else
    local argk: string = arg[argi]
    local argv: string
    local match_argkv: boolean, argkv: sequence(string) <close> = argk:matchview('^(-[a-z%-]+)%=(.*)$')
    if match_argkv then
      argk = argkv[1]
      argv = argkv[2]
    end
    ## end
    if argk == '-cartridge' then
      opts.cartridge_filename = argv
      if #opts.entrypoint == 0 then
        opts.entrypoint = "exec riv-run"
      end
    elseif argk == '-record' then
      assert(not opts.replaying, 'already replaying')
      assert(not opts.verifying, 'already verifying')
      opts.record_filename = argv
      opts.recording = true
    elseif argk == '-replay' then
      assert(not opts.recording, 'already recording')
      assert(not opts.verifying, 'already verifying')
      opts.replay_filename = argv
      opts.replaying = true
    elseif argk == '-verify' then
      assert(not opts.replaying, 'already replaying')
      assert(not opts.recording, 'already recording')
      opts.verify_filename = argv
      opts.verifying = true
      opts.wait_halt = true
    elseif argk == '-verify-outhash' then
      opts.verify_outhash = argv
    elseif argk == '-load-incard' then
      opts.incard_filename = argv
    elseif argk == '-save-outcard' then
      opts.outcard_filename = argv
    elseif argk == '-save-outhist' then
      opts.outhist_filename = argv
      opts.tracking_outhist = true
    elseif argk == '-save-outhash' then
      opts.outhash_filename = argv
    elseif argk == '-save-screenshot' then
      opts.screenshot_filename = argv
    elseif argk == '-kernel' then
      opts.kernel_filename = argv
    elseif argk == '-bootargs' then
      opts.bootargs = argv
    elseif argk == '-sdk' or argk == '-rootfs' then
      opts.rootfs_filename = argv
      if #argv == 0 then
        local rivemu_sdk_env: string = C.getenv('RIVEMU_SDK')
        -- TODO: search relative to install path
        if #rivemu_sdk_env > 0 then
          opts.rootfs_filename = rivemu_sdk_env
        else
          opts.rootfs_filename = "rivos-sdk.ext2"
        end
      end
    elseif argk == '-workspace' then
      opts.workspace_directory = argv
      if #argv == 0 then
        opts.workspace_directory = "."
      end
      if #opts.workdir == 0 then
        opts.workdir = '/workspace'
      end
    elseif argk == '-init' then
      opts.init = argv
    elseif argk == '-entrypoint' then
      opts.entrypoint = argv
    elseif argk == '-entrypoint-script' then
      local file: filestream <close> = fn_assert!(io.open(argv, 'rb'))
      local contents: string <close> = fn_assert!(file:read('a'))
      entrypoint_sb:write(contents)
      opts.entrypoint = entrypoint_sb:view()
    elseif argk == '-args' then
      opts.args = argv
    elseif argk == '-user' then
      opts.user = argv
    elseif argk == '-workdir' then
      opts.workdir = argv
    elseif argk == '-env' then
      opts.env = argv
    elseif argk == '-hostname' then
      opts.hostname = argv
    elseif argk == '-entropy' then
      opts.entropy = argv
    elseif argk == '-mem' then
      assert(argv:find('^[0-9]+$') > 0, 'malformed mem integer')
      opts.mem = tointeger(argv) * 1024*1024
      assert(opts.mem > 0, 'mem must be positive')
    elseif argk == '-speed' then
      assert(argv:find('^[0-9]+%.?[0-9]*$') > 0, 'malformed speed number')
      opts.speed = tonumber(argv)
      assert(math.floor(4*opts.speed) == 4*opts.speed, 'speed must be a multiple of 0.25')
      assert(opts.speed > 0.0, 'speed must be positive')
    elseif argk == '-stop-frame' then
      local numstr: string = argv
      assert(numstr:find('^[0-9]+$') > 0, 'malformed frame number')
      opts.stop_frame = tointeger(numstr)
    elseif argk == '-pixel-perfect' then
      opts.pixel_perfect = true
    elseif argk == '-no-audio' then
      opts.no_audio = true
    elseif argk == '-no-video' then
      opts.no_video = true
    elseif argk == '-no-loading' then
      opts.no_loading = true
    elseif argk == '-no-window' then
      opts.no_window = true
      opts.no_audio = true
      opts.no_video = true
      opts.no_loading = true
    elseif argk == '-no-yield' then
      opts.no_yield = true
    elseif argk == '-no-quit' then
      opts.no_quit = true
    elseif argk == '-wait-halt' then
      opts.wait_halt = true
    elseif argk == '-bench' then
      opts.benchmarking = true
    elseif argk == '-print-frame-hash' then
      opts.print_frame_hash = true
    elseif argk == '-print-final-hash' then
      opts.print_final_hash = true
    elseif argk == '-print-outhash' then
      opts.print_outhash = true
    elseif argk == '-print-outcard' then
      opts.print_outcard = true
    elseif argk == '-net' then
      opts.network = true
    elseif argk == '-persist' then
      opts.persist = true
    elseif argk == '-quiet' then
      opts.quiet = true
    elseif argk == '-it' then
      opts.interactive = true
      opts.no_loading = true
      if #opts.entrypoint == 0 then
        opts.entrypoint = "exec ash -l"
      end
    elseif argk == '-exec' or argk == '--' then
      argi = argi + 1
      if argc > argi + 1 then -- multiple arguments
        entrypoint_sb:clear()
        entrypoint_sb:write('exec')
        while argi < argc do
          entrypoint_sb:write(' ')
          local argv_quoted: string <close> = arg[argi]:gsub([[']], [['\'']])
          entrypoint_sb:write([[']],argv_quoted,[[']])
          argi = argi + 1
        end
        opts.entrypoint = entrypoint_sb:view()
      else -- one argument
        opts.entrypoint = arg[argi]
        argi = argi + 1
      end
    elseif argk:find('^[^%-].*%.sqfs$') > 0 then
      opts.cartridge_filename = argk
      entrypoint_sb:clear()
      entrypoint_sb:write("exec riv-run")
      argi = argi + 1
      local first_argi: integer = argi
      while argi < argc do
        entrypoint_sb:write(' ', arg[argi])
        argi = argi + 1
      end
      opts.entrypoint = entrypoint_sb:view()
    elseif argk == '-version' or argk == '--version' or argk == '-v' then
      io.stdout:printf("rivemu %d.%d.%d\n", RIV_VERSION_MAJOR, RIV_VERSION_MINOR, RIVEMU_VERSION_PATCH)
      io.stdout:printf("libriv %d.%d.%d\n", RIV_VERSION_MAJOR, RIV_VERSION_MINOR, RIV_VERSION_PATCH)
      ## if ccinfo.is_windows then
        io.stdout:printf("platform: windows\n")
      ## elseif ccinfo.is_linux then
        io.stdout:printf("platform: linux\n")
      ## elseif ccinfo.is_macos then
        io.stdout:printf("platform: macos\n")
      ## end
      ## if ccinfo.is_arm64 then
        io.stdout:printf("architecture: arm64\n")
      ## elseif ccinfo.is_x86_64 then
        io.stdout:printf("architecture: amd64\n")
      ## elseif ccinfo.is_wasm then
        io.stdout:printf("architecture: wasm\n")
      ## elseif ccinfo.is_riscv and ccinfo.sizeof_pointer == 8 then
        io.stdout:printf("architecture: riscv64\n")
      ## end
      io.stdout:printf("build date: %s GMT\n", os.date('!%Y-%m-%d %H:%M:%S'))
      os.exit(0)
    elseif argk == '-help' or argk == '--help' or argk == '-h' then
      io.write[[
USAGE
  rivemu [options] [.sqfs] [args]

OPTIONS
  -cartridge=<filename>
    Cartridge to load at /dev/pmem1 drive.
    If no entrypoint is set, then it's set to "exec riv-run".

  -record=<filename>
    Record game to an input log.

  -replay=<filename>
    Replay game from an input log.

  -verify=<filename>
    Verify a game from an input log.

  -verify-outhash=<hash>
    Verify a game output card hash.

  -load-incard=<filename>
    Load input card from a file.

  -save-outcard=<filename>
    Save output card to a file.

  -save-outhash=<filename>
    Save output card SHA256 hash to a file as a hexadecimal string.

  -save-screenshot=<filename>
    Save screenshot of last frame to a PNG image file.

  -kernel=<filename>
    Override the default Linux kernel image.

  -bootargs=<args>
    Append kernel bootargs when initializing the machine.

  -sdk
    Load the RIV SDK operating system instead of the minimal RIV OS.
    The image filename from "RIVEMU_SDK" environment variable is used when present,
    otherwise it tries to load "rivos-sdk.ext2" from current directory.

  -workspace
    Mount current working directory into /workspace directory in the machine.
    If workdir is not set, then it's set to /workspace.

  -workspace=<directory>
    Mount target directory into /workspace directory in the machine.
    If workdir is not set, then it's set to /workspace.

  -init=<commands>
    Execute commands when initializing the machine.

  -entrypoint=<command>
    Override the entrypoint command.
    When a cartridge is set, the default entrypoint is "exec riv-run".
    When in interactive mode, the default entrypoint is "exec ash -l".

  -entrypoint-script=<filename>
    Override the entrypoint to run a shell script.

  -args=<args>
    Append arguments to the entrypoint.

  -user=<name>
    Set the user to run the entrypoint.

  -workdir=<name>
    Set the working directory of the entrypoint.

  -env=<VAR=VAL>
    Export environment variables before running the entrypoint.
    Multiple variables can be set seprated by spaces.

  -hostname=<name>
    Set the machine hostname.

  -entropy=<hash>
    Use hash as random entropy, affecting the pseudo random number generator of cartridges.

  -mem=<number>
    Set the machine RAM memory size, the value is in megabytes.
    The default is 256.

  -speed=<speed>
    Set replay speed.

  -stop-frame=<frame>
    Set frame to stop.

  -pixel-perfect
    Resize screen while maintaining pixel perfect sizes.

  -no-audio
    Disable audio.

  -no-video
    Disable video.

  -no-loading
    Disable the loading screen.

  -no-window
    Disable the graphical window.
    Implies "-no-loading -no-video -no-audio".

  -no-yield
    Signs to the running cartridge that it doesn't need to
    yield graphics and audio to the host.

  -no-quit
    Don't quit when cartridge finishes.

  -wait-halt
    Don't quit when RIV device is closed, wait for the machine to halt.

  -bench
    Print benchmark statistics every second.
    Such as frames per second, CPU cost, CPU speed, CPU usage and CPU quota.

  -print-frame-hash
    Print the machine root hash for every frame.

  -print-final-hash
    Print final machine root hash.

  -print-frame-hash
    Print machine root hash for every frame.

  -print-outhash
    Print outcard final hash.

  -print-outcard
    Print outcard final hash.

  -net
    Enable networking support in the machine.

  -persist
    Persist changes in the machine root filesystem.
    This option only take effect with -sdk option.

  -quiet
    Don't print emulator debug messages.

  -it
    Run in interactive terminal mode.
    If no entrypoint is set, then it's set to "exec ash -l".

  -- [...]
  -exec [...]
    Overwrites the entrypoint to executes a shell command.
    All subsequent arguments are propagate to the command.

  -version
    Show version and quit.

  -help
    Print this help.
]]
      os.exit(0)
    else
      ## if not ccinfo.is_emscripten then
        error(string.format("unknown command line option '%s'", argk))
      ## end
    end
    argi = argi + 1
  end
  return opts
end

function rivemu_options:get_init_entrypoint(): (string, string)
  -- build init
  local init_sb: stringbuilder <close>
  if self.quiet then
    init_sb:write('export RIV_QUIET=y\n')
  end
  if #self.entropy > 0 then
    init_sb:writef('export RIV_ENTROPY=%s\n', self.entropy)
  end
  if self.verifying then
    init_sb:write('export RIV_OUTCARD=/run/outcard RIV_OUTHASH=/run/outhash\n')
  end
  if #self.verify_filename > 0 then
    init_sb:write('export RIV_REPLAYLOG=/dev/pmem2\n')
  elseif self.extract_info then
    init_sb:write('export RIV_COPY_INFO=/dev/pmem2\n')
  end
  if #self.cartridge_filename > 0 then
    init_sb:write('export RIV_CARTRIDGE=/dev/pmem1\n')
  end
  if self.stop_frame >= 0 then
    init_sb:writef('export RIV_STOP_FRAME=%s\n', self.stop_frame)
  end
  if self.no_yield then
    init_sb:write('export RIV_NO_YIELD=y\n')
  end
  if self.interactive or self.network or #self.workspace_directory > 0 then
    init_sb:writef('busybox date -s @%d >> /dev/null\n', os.time() + 1)
  end
  if self.interactive then
    local term: string = C.getenv('TERM')
    if #term > 0 then
      init_sb:writef('export TERM=%s\n', term)
    end
    local lang: string = C.getenv('LANG')
    if #lang > 0 and lang:find('[uU][tT][fF]%-?8') > 0 then
      init_sb:write('export LANG=C.UTF-8\n')
    end
  end
  if self.network then
    init_sb:write([[
busybox ip link set dev eth0 up
busybox ip addr add 10.0.2.15/24 dev eth0
busybox ip route add default via 10.0.2.2 dev eth0
[ -w /etc/resolv.conf ] && echo 'nameserver 10.0.2.3' > /etc/resolv.conf
]])
  end
  if #self.workspace_directory > 0 then
    init_sb:write("busybox mount -t 9p workspace /workspace\n")
  end
  if #self.workdir > 0 then
    init_sb:writef("WORKDIR=%s\n", self.workdir)
  end
  if #self.user > 0 then
    init_sb:writef("USER=%s\n", self.user)
  end
  if #self.hostname > 0 then
    init_sb:writef("busybox hostname %s\n", self.hostname)
  end
  if #self.env > 0 then
    init_sb:writef("export %s\n", self.env)
  end
  init_sb:write(self.init)

  -- build entrypoint
  local entrypoint_sb: stringbuilder <close>
  entrypoint_sb:write(self.entrypoint)
  if #self.args > 0 then
    entrypoint_sb:write(' ')
    entrypoint_sb:write(self.args)
  end

  return init_sb:promote(), entrypoint_sb:promote()
end

local options: rivemu_options
local framelimiter: rivemu_framelimiter
local running: boolean
local loading: boolean
local started: boolean
local cleared_first_frame: boolean
local last_open_device_frame: uint64
local default_canvas_width: int32 = 768
local got_initial_canvas_width: boolean

-- Begin the machine entrypoint.
local function begin(): void
  -- initialize the machine
  local init: string <close>, entrypoint: string <close> = options:get_init_entrypoint()
  machine = rivemu_machine.create(init, entrypoint, options.bootargs,
                                  options.kernel_filename, options.rootfs_filename,
                                  options.cartridge_filename, options.verify_filename,
                                  options.interactive, options.network, options.persist,
                                  options.workspace_directory, options.mem)
  running = true

  if options.recording then -- start recording
    rivemu_printer.debugf('[RIVEMU] Recording...\n')
    rivemu_input.start_recording()
  elseif options.replaying then -- start replaying
    rivemu_printer.debugf('[RIVEMU] Replaying...\n')
    rivemu_input.load_replay_from_file(options.replay_filename)
  elseif options.verifying then
    rivemu_printer.debugf('[RIVEMU] Verifying...\n')
  end
  if options.tracking_outhist then
    rivemu_iocard.start_tracking_outhist()
  end
end

-- Initialize application.
local function startup(): void
  rivemu_printer.set_quiet(options.quiet)
  rivemu_printer.debugf('[RIVEMU] Starting up...\n')

  started = true
  loading = true

  -- init subsystems
  rivemu_iocard.setup()
  if not options.no_video then
    rivemu_video.setup(options.pixel_perfect)
    if not options.no_loading then
      rivemu_video.set_loading(true)
    end
  end
  if not options.no_audio then
    rivemu_audio.setup()
    rivemu_audio.set_pitch(options.speed)
    if not options.no_loading then
      rivemu_audio.start_boot_sound()
    end
  end
  rivemu_input.setup()

  ## if ccinfo.is_emscripten then
    cemit![[
      EM_ASM({
        window.dispatchEvent(new Event("rivemu_on_startup"));
      });
    ]]
  ## end

  begin()
end

local function finish(halting: boolean): void
  if not running then return end
  local stopping: boolean = not options.interactive or halting
  if stopping then
    running = false
  end

  if not options.no_audio then
    rivemu_audio.reset()
  end

  if options.tracking_outhist then
    rivemu_iocard.stop_tracking_outhist()
  end

  if #options.outhash_filename > 0 then
    rivemu_iocard.save_outhash(options.outhash_filename)
  end
  if #options.outcard_filename > 0 then
    rivemu_iocard.save_outcard(options.outcard_filename)
  end
  if #options.outhist_filename > 0 then
    rivemu_iocard.save_outhist(options.outhist_filename)
  end
  if options.print_outcard then
    rivemu_iocard.print_outcard()
  end
  if options.print_outhash then
    rivemu_iocard.print_outcard_checksum()
  end
  if #options.verify_outhash > 0 then
    rivemu_iocard.verify_outcard_checksum(options.verify_outhash)
  end

  if options.recording then
    rivemu_input.save_replay(options.record_filename)
  end

  if #options.screenshot_filename > 0 then
    rivemu_video.save_screenshot(options.screenshot_filename)
  end

  if stopping then
    if options.wait_halt then
      rivemu_printer.debugf('[RIVEMU] Waiting halt...\n')
      repeat until machine:run((@uint64)(-1)) == CM_BREAK_REASON_HALTED
    end

    if options.print_final_hash then
      local root_hash: string <close> = hexhash(machine:get_root_hash())
      io.printf('[RIVEMU] Cycles %d: %s\n', machine:read_mcycle(), root_hash)
    else
      rivemu_printer.debugf('[RIVEMU] Cycles %d\n', machine:read_mcycle())
    end
  end

  ## if ccinfo.is_emscripten then
    local rivlog_filename: string = options.replaying and options.replay_filename or options.record_filename
    local rivlog_file: filestream <close> = fn_assert!(io.open(rivlog_filename, 'rb'))
    local rivlog_data: string <close> = fn_assert!(rivlog_file:read('a'))
    local rivlog_ptr: *uint8 <nodce> = (@*uint8)(rivlog_data.data)
    local rivlog_len: int32 <nodce> = (@int32)(rivlog_data.size)

    local outcard_file: filestream <close> = fn_assert!(io.open(options.outcard_filename, 'rb'))
    local outcard_data: string <close> = fn_assert!(outcard_file:read('a'))
    local outcard_ptr: *uint8 <nodce> = (@*uint8)(outcard_data.data)
    local outcard_len: int32 <nodce> = (@int32)(outcard_data.size)

    local outhash_file: filestream <close> = fn_assert!(io.open(options.outhash_filename, 'rb'))
    local outhash_data: string <close> = fn_assert!(outhash_file:read('a'))
    local outhash_ptr: cstring <nodce> = (@cstring)(outhash_data.data)

    cemit![[
      EM_ASM({
        let rivlog = HEAPU8.subarray($0, $0 + $1);
        let outcard = HEAPU8.subarray($2, $2 + $3);
        let outhash = UTF8ToString($4);
        rivemu_on_finish(rivlog, outcard, outhash);
      }, rivlog_ptr, rivlog_len, outcard_ptr, outcard_len, outhash_ptr);
    ]]
  ## end

  if stopping and not options.no_quit then
    rivemu_quit()
  end
end

-- Terminate application.
local function shutdown(): void
  if not started then return end
  rivemu_printer.debugf('[RIVEMU] Shutting down...\n')

  finish(true)

  rivemu_iocard.shutdown()
  rivemu_input.shutdown()
  if not options.no_video then
    rivemu_video.shutdown()
  end
  if not options.no_audio then
    rivemu_audio.shutdown()
  end

  if machine:is_halted() then
    exit_code = machine:read_halt_exit_code()
  end

  machine:destroy()
  framelimiter = {}
  started = false
  loading = false

  ## if ccinfo.is_emscripten then
    cemit![[
      EM_ASM({
        window.dispatchEvent(new Event("rivemu_on_shutdown"));
      });
    ]]
  ## end
end

-- Run the machine until it yields the next frame.
local function machine_frame(): void
  while true do
    local mcycle_end: uint64 = (@uint64)(-1)
    if loading and not options.no_loading then
      -- advance just a few cycles to not freeze the application
      -- and display a loading screen
      mcycle_end = machine:read_mcycle() + 2*1024*1024
    end
    switch machine:run(mcycle_end) do
    case CM_BREAK_REASON_YIELDED_SOFTLY then
      -- execute control event from the yield
      switch machine:read_x(RISCV_REG_A0) do
      case RIV_CONTROL_OPEN then
        last_open_device_frame = machine.mmio_driver.frame
        rivemu_printer.debugf('[RIVEMU] Open RIV device\n')
        if #options.incard_filename > 0 then
          rivemu_iocard.load_incard(options.incard_filename)
        end
        -- reset input state
        rivemu_input.reset_keys_state()
      case RIV_CONTROL_CLOSE then
        rivemu_printer.debugf('[RIVEMU] Close RIV device\n')
        -- copy output card from guest memory into host memory
        rivemu_iocard.update_outcard()
        -- copy frame buffer from guest memory into host memory
        if not options.no_video then
          rivemu_video.update_framebuffer()
        end
        finish()
        return
      case RIV_CONTROL_PRESENT then
        if loading then
          loading = false
          rivemu_video.set_loading(false)
        end
        -- poll audio
        if not options.no_audio then
          -- reset audio in the first frame
          if machine.mmio_driver.frame == last_open_device_frame then
            rivemu_audio.reset()
            rivemu_audio.start()
          else
            rivemu_audio.advance_pcm_frame(machine.mmio_driver.target_fps * options.speed)
          end
          rivemu_audio.poll_commands()
        end
        -- copy output card from guest memory into host memory
        rivemu_iocard.update_outcard()
        -- copy frame buffer from guest memory into host memory
        if not options.no_video then
          rivemu_video.update_framebuffer()
        end
        -- must break the loop so we can present the video
        return
      case RIV_CONTROL_FLUSH_COMMAND then
        -- poll audio
        if not options.no_audio then
          rivemu_audio.poll_commands()
        end
      else
        error 'unknown yield reason'
      end
    case CM_BREAK_REASON_HALTED then
      rivemu_printer.debugf('[RIVEMU] Halted\n')
      finish(true)
      return
    case CM_BREAK_REASON_REACHED_TARGET_MCYCLE then
      -- continue
      return
    else
      error('unexpected machine break reason')
      return
    end
  end
end

-- Advance to the next frame.
local function advance_frame(): void
  if not running or machine:is_halted() then return end

  -- check if is the last replay frame
  local replay_finished: boolean = rivemu_input.is_replay_at_end()

  -- poll input events into machine device memory
  if not loading then
    rivemu_input.poll()
  end

  -- poll next frame from machine driver memory
  local was_loading: boolean = loading
  local mcycle_start: uint64 = machine:read_mcycle()
  local time_start: float64 = os.now()
  machine_frame()
  local now: float64 = os.now()
  local time_elapsed: float64 = now - time_start
  local mcycle: uint64 = machine:read_mcycle()
  local mcycle_elapsed: uint64 = mcycle - mcycle_start
  local target_fps: uint32 = machine.mmio_driver.target_fps
  local frame: uint64 = machine.mmio_driver.frame

  -- warn about slow frames
  if not loading and frame ~= last_open_device_frame and not options.no_window and target_fps > 0 and time_elapsed > 1.0/target_fps then
    io.printf('[RIVEMU] SLOW FRAME: frame=%d elapsed_time=%.2fms elapsed_cycles=%.2fM cpu_speed=%.2fMIPS\n',
      frame,
      time_elapsed * 1000.0,
      mcycle_elapsed / 1000000.0,
      mcycle_elapsed / (time_elapsed * 1000000.0))
  end

  if not loading and options.print_frame_hash then
    local root_hash: string <close> = hexhash(machine:get_root_hash())
    io.printf('[RIVEMU] frame=%d hash=%s\n', frame, root_hash)
  end

  -- print fps
  if running then
    framelimiter.target_update_fps = target_fps * options.speed
    if framelimiter:update_stats(frame, now, time_elapsed, mcycle, mcycle_elapsed, target_fps) and options.benchmarking then
      framelimiter:print_stats(frame)
    end
  end

  -- notify when game begins
  if not loading and was_loading then
    ## if ccinfo.is_emscripten then
      local width: int32 <nodce> = machine.mmio_driver.width
      local height: int32 <nodce> = machine.mmio_driver.height
      local target_fps: int32 <nodce> = (@int32)(target_fps)
      local num_frames: int32 <nodce> = rivemu_input.get_replay_frames()
      local canvas_width: int32 <nodce> = (default_canvas_width // width) * width
      if canvas_width == 0 then canvas_width = width end
      local canvas_height: int32 <nodce> = math.ifloor((height / width) * canvas_width)
      local info: span(byte)
      defer delete(info) end
      if options.extract_info then
        local len: uint32 = 0
        machine:read_memory(0xa0000000000000, (@span(byte)){data=(@*[0]byte)(&len), size=4})
        if len <= 2*1024*1024 then
          info = new(@byte, len)
          machine:read_memory(0xa0000000000000+4, info)
        end
      end
      local info_ptr: *[0]uint8 <nodce> = info.data
      local info_len: int32 <nodce> = info.size

      cinclude![[
static void _sapp_emsc_resize(int width, int height) {
    if (_sapp.desc.high_dpi) {
        _sapp.dpi_scale = emscripten_get_device_pixel_ratio();
    }
    _sapp.window_width = width;
    _sapp.window_height = height;
    _sapp.framebuffer_width = (int)roundf(width * _sapp.dpi_scale);
    _sapp.framebuffer_height = (int)roundf(height * _sapp.dpi_scale);
    SOKOL_ASSERT((_sapp.framebuffer_width > 0) && (_sapp.framebuffer_height > 0));
    emscripten_set_canvas_element_size(_sapp.html5_canvas_selector, _sapp.framebuffer_width, _sapp.framebuffer_height);
    #if defined(SOKOL_WGPU)
        // on WebGPU: recreate size-dependent rendering surfaces
        _sapp_emsc_wgpu_size_changed();
    #endif
    if (_sapp_events_enabled()) {
        _sapp_init_event(SAPP_EVENTTYPE_RESIZED);
        _sapp_call_event(&_sapp.event);
    }
}
]]
      cemit![[
        _sapp_emsc_resize(canvas_width, canvas_height);
        EM_ASM({
          let info = HEAPU8.subarray($4, $4 + $5);
          rivemu_on_begin($0, $1, $2, $3, info);
        }, width, height, target_fps, num_frames, info_ptr, info_len);
      ]]
    ## end
  end

  -- notify frames
  if not loading and running then
    ## if ccinfo.is_emscripten then
      local outcard_data: span(byte) = rivemu_iocard.get_outcard_data()
      local ptr: *uint8 <nodce> = (@*uint8)(outcard_data.data)
      local len: int32 <nodce> = (@int32)(outcard_data.size)
      local frame_num: float64 <nodce> = frame
      local cycles: float64 <nodce> = mcycle
      local fps: float64 <nodce> = framelimiter.fps
      local cpu_cost: float64 <nodce> = framelimiter.cpu_cost
      local cpu_speed: float64 <nodce> = framelimiter.cpu_speed
      local cpu_usage: float64 <nodce> = framelimiter.cpu_usage
      local cpu_quota: float64 <nodce> = framelimiter.cpu_quota
      cemit![[
        EM_ASM({
          let outcard = HEAPU8.subarray($0, $0 + $1);
          rivemu_on_frame(outcard, $2, $3, $4, $5, $6, $7, $8);
        }, ptr, len, frame_num, cycles, fps, cpu_cost, cpu_speed, cpu_usage, cpu_quota);
      ]]
    ## end
  end

  -- force finish when replay ends
  if running and replay_finished then
    rivemu_printer.debugf('[RIVEMU] Finish replay\n')
    finish()
  end
end


local function notify_frame(): void
  if not running then return end
end

-- Poll next frame.
local function frame(): void
  -- the very first frame should only clear the screen
  if not options.no_video and not cleared_first_frame then
    rivemu_video.present()
    cleared_first_frame = true
    return
  end

  if running then
    -- TODO: get display refresh rate
    local refresh_rate: float64 = 60
    if not machine:is_mmio_ready() then -- process immediately the first frame
      framelimiter.last_frame_time = os.now()
      advance_frame()
    elseif options.no_window then -- process immediately when there is no window
      advance_frame()
    elseif options.speed <= 0 then
      -- skip
    elseif framelimiter.target_update_fps <= refresh_rate then -- wait time between frames
      if framelimiter:should_process_next_frame(os.now()) then
        advance_frame()
      end
    else -- processing faster than refresh rate
      local now_start: float64 = os.now()
      local now_end: float64 = now_start + (1.0 / refresh_rate)
      local dt: float64 = 1.0 / (refresh_rate * options.speed)
      for now=now_start,<now_end,dt do
        if framelimiter:should_process_next_frame(now) then
          -- advance to next frame
          advance_frame()
        end
      end
    end
  end
  -- poll audio
  if not options.no_audio then
    rivemu_audio.poll()
  end
  -- display the frame
  if not options.no_video then
    rivemu_video.present()
  end
  -- sync audio
  if not options.no_audio then
    rivemu_audio.sync_pcm_frame(framelimiter.target_update_fps)
  end
  -- restart when requested
  if restart_requested then
    restart_requested = false
    local no_quit: boolean = options.no_quit
    options.no_quit = true
    rivemu_printer.debugf('[RIVEMU] Restarting...\n')
    shutdown()
    options.no_quit = no_quit
    startup()
  end
end

-- Initialize args
local argc: cint <cimport'argc'>
local argv: *[0]cstring <cimport'argv'>
sargs_setup(sargs_desc{
  argc=argc,
  argv=argv
})

-- Application main loop.
local function run()
  ## if ccinfo.is_emscripten then
    if not got_initial_canvas_width then
      local width: cint, height: cint
      if emscripten_get_canvas_element_size("#canvas", &width, &height) == EMSCRIPTEN_RESULT_SUCCESS then
        default_canvas_width = width
      end
      got_initial_canvas_width = true
    end
  ## end
  if options.no_window then
    -- run a console application (no video or video)
    running_sapp = false
    startup()
    while not quit_requested do frame() end
    shutdown()
  else
    running_sapp = true
    sapp_run(sapp_desc{
      init_cb = startup,
      frame_cb = frame,
      cleanup_cb = shutdown,
      event_cb = rivemu_input.append_event,
      width = default_canvas_width,
      height = default_canvas_width,
      html5_canvas_name = "canvas",
      html5_preserve_drawing_buffer = true,
      html5_canvas_resize = true,
      window_title = "RIVEMU",
      logger = {func = slog_func}
    })
  end
end

## if not ccinfo.is_emscripten then

-- parse options and run
options = parse_options()
run()
return exit_code

## else

require 'linux'

local function rivemu_start_record(cartridge_ptr: *uint8, cartridge_len: int32,
                                  incard_ptr: *uint8, incard_len: int32,
                                  entropy: cstring, args: cstring): void <cexport>
  assert(not running and not started, 'rivemu is running, please stop it first')
  options = parse_options()
  do
    local contents: string = {data=(@*[0]byte)(cartridge_ptr), size=cartridge_len}
    if contents:subview(1,4) == 'hsqs' then -- SQFS cartridge
      local file: filestream <close> = fn_assert!(io.open('/cartridge.sqfs', 'wb'))
      fn_assert!(file:write(contents))
      options.cartridge_filename = '/cartridge.sqfs'
      options.entrypoint = "exec riv-run"
    else -- some other file type, try to actually run it
      local file: filestream <close> = fn_assert!(io.open('/cartridge', 'wb'))
      fn_assert!(file:write(contents))
      chmod('/cartridge', 755)
      options.workspace_directory = "/"
      options.workdir = "/workspace"
      options.entrypoint = "exec ./cartridge"
    end
  end
  if incard_len > 0 then
    local contents: string = {data=(@*[0]byte)(incard_ptr), size=incard_len}
    local file: filestream <close> = fn_assert!(io.open('/replay.incard', 'wb'))
    fn_assert!(file:write(contents))
    options.incard_filename = '/replay.incard'
  end
  options.record_filename = '/replay.rivlog'
  options.outcard_filename = '/replay.outcard'
  options.outhash_filename = '/replay.outhash'
  options.entropy = entropy
  options.args = args
  options.recording = true
  options.extract_info = true
  run()
end

local function rivemu_start_replay(cartridge_ptr: *uint8, cartridge_len: int32,
                                   incard_ptr: *uint8, incard_len: int32,
                                   entropy: cstring, args: cstring,
                                   rivlog_ptr: *uint8, rivlog_len: int32): void <cexport>
  assert(not running and not started, 'rivemu is running, please stop it first')
  options = parse_options()
  do
    local contents: string = {data=(@*[0]byte)(cartridge_ptr), size=cartridge_len}
    if contents:subview(1,4) == 'hsqs' then -- SQFS cartridge
      local file: filestream <close> = fn_assert!(io.open('/cartridge.sqfs', 'wb'))
      fn_assert!(file:write(contents))
      options.cartridge_filename = '/cartridge.sqfs'
      options.entrypoint = "exec riv-run"
    else -- some other file type, try to actually run it
      local file: filestream <close> = fn_assert!(io.open('/cartridge', 'wb'))
      fn_assert!(file:write(contents))
      chmod('/cartridge', 755)
      options.workspace_directory = "/"
      options.workdir = "/workspace"
      options.entrypoint = "exec ./cartridge"
    end
  end
  if incard_len > 0 then
    local contents: string = {data=(@*[0]byte)(incard_ptr), size=incard_len}
    local file: filestream <close> = fn_assert!(io.open('/replay.incard', 'wb'))
    fn_assert!(file:write(contents))
    options.incard_filename = '/replay.incard'
  end
  do
    local contents: string = {data=(@*[0]byte)(rivlog_ptr), size=rivlog_len}
    local file: filestream <close> = fn_assert!(io.open('/replay.rivlog', 'wb'))
    fn_assert!(file:write(contents))
    options.replay_filename = '/replay.rivlog'
  end
  options.outcard_filename = '/replay.outcard'
  options.outhash_filename = '/replay.outhash'
  options.entropy = entropy
  options.args = args
  options.replaying = true
  options.extract_info = true
  run()
end

local function rivemu_set_speed(speed: float64) <cexport>
  speed = math.clamp(speed, 0, 4)
  local resuming = options.speed <= 0 and speed > 0
  local pausing = options.speed > 0 and speed <= 0
  options.speed = speed
  if not started then return end
  if speed > 0 then
    rivemu_audio.set_pitch(speed)
  end
  if resuming then
    framelimiter.last_frame_time = os.now() - 1.0/framelimiter.target_update_fps
    if not options.no_audio then
      rivemu_audio.start()
    end
  elseif pausing then
    if not options.no_audio then
      rivemu_audio.stop()
    end
  end
end

local function rivemu_stop(url: cstring): boolean <cexport>
  if not started then return false end
  rivemu_printer.debugf('[RIVEMU] Stop requested!\n')
  rivemu_quit()
  return true
end

##[[
-- Disable default Nelua cflags for debug/release mode
require('nelua.cdefs').compilers_flags.emcc.cflags_devel = ""

-- Set required emscripten flags
cflags('-sFULL_ES3 -sSTACK_SIZE=4MB -sTOTAL_MEMORY=384MB')

-- debugging
-- cflags '-sSAFE_HEAP'
-- cflags '-sASSERTIONS=2'
-- cflags '-fsanitize=undefined,address'

-- Export functions to web environment
cflags('-sENVIRONMENT=web')
local export_functions = {
  '_main',
  '_rivemu_start_record',
  '_rivemu_start_replay',
  '_rivemu_stop',
  '_rivemu_set_speed',
  '_malloc',
  '_free',
}
cflags('-sEXPORTED_FUNCTIONS='..table.concat(export_functions,','))
local export_runtime_functions = {
  'ccall',
  'cwrap',
}
cflags('-sEXPORTED_RUNTIME_METHODS='..table.concat(export_runtime_functions,','))
]]

## end
