-- This file contains code related to machine being emulated.

require 'io'
require 'cartesi'
require 'keccak'

require 'riv_types'
require 'macros'
require 'miniz'

global riv_paddr_base: type <using> = @enum(uint64) {
  RIV_PADDR_RAM        = 0x80000000,
  RIV_PADDR_ROOTFS     = 0x80000000000000,
  RIV_PADDR_CARTRIDGE  = 0x90000000000000,
  RIV_PADDR_REPLAYLOG  = 0xa0000000000000,
}

global riscv_reg_ids: type <using> = @enum(int64) {
  RISCV_REG_A0 = 10
}

global RIV_SIZE_REPLAYLOG: uint64 <comptime> = 2*1024*1024

--------------------------------------------------------------------------------

-- Macro to check if a cm_* call was a success.
## function cm_assert(callnode)
  do
    ## local callname = callnode[2][1]
    local result: auto = #[callnode]#
    if result ~= 0 then
      error(#[callname..': ']#..cm_get_last_error_message())
    end
  end
## end

--------------------------------------------------------------------------------

-- Machine.
global rivemu_machine = @record{
  machine: *cm_machine,
  in_softyield: boolean,
  mmio_connected: boolean,
  mmio_driver: riv_mmio_driver,
  mmio_device: riv_mmio_device
}

-- Uncompress a buffer compressed with gzip directly into machine memory.
function rivemu_machine:uncompress_memory(paddr: uint64, compressed_bytes: string): void
  local UncompressEnv: type = @record{machine: *cm_machine, offset: uint64}
  local function uncompress_cb(buf: *[0]byte, len: cint, env: *UncompressEnv): cint
    cm_assert!(cm_write_memory(env.machine, env.offset, buf, len))
    env.offset = env.offset + len
    return 1
  end
  local env: UncompressEnv = {self.machine, paddr}
  local buf: pointer = &compressed_bytes.data[0]
  local buf_size: csize = compressed_bytes.size
  assert(tinfl_decompress_mem_to_callback(buf, &buf_size, (@tinfl_put_buf_func_ptr)(uncompress_cb), &env, TINFL_FLAG_PARSE_ZLIB_HEADER) == 1, 'failed to uncompress')
end

local function escape_json(s: string): string
  local t: string
  s = s:copy()
  t = s:gsub([[\]], [[\\]]); s:destroy(); s = t
  t = s:gsub([["]], [[\"]]); s:destroy(); s = t
  t = s:gsub("\b", [[\b]]); s:destroy(); s = t
  t = s:gsub("\f", [[\f]]); s:destroy(); s = t
  t = s:gsub("\n", [[\n]]); s:destroy(); s = t
  t = s:gsub("\r", [[\r]]); s:destroy(); s = t
  t = s:gsub("\t", [[\t]]); s:destroy(); s = t
  -- TODO: fix leak when returning this string
  return s
end

-- Creates a new machine.
function rivemu_machine.create(init: string, entrypoint: string, append_bootargs: string,
                               kernel_filename: string, rootfs_filename: string,
                               cartridge_filename: string, replaylog_filename: string,
                               interactive: boolean, network: boolean, persist: boolean,
                               workspace: string, ram_length: uint64): rivemu_machine
  -- set config
  local config: stringbuilder <close>
  config:writef('{')
  do
    -- rivos flash drive
    config:writef('"flash_drive":[')
    do
      config:writef('{"start":%d,', RIV_PADDR_ROOTFS)
      if #rootfs_filename > 0 then
        config:writef('"image_filename":"%s",', escape_json(rootfs_filename))
        config:writef('"shared":%s', persist)
      else
        config:writef('"length":%s', #[require'nelua.utils.fs'.getsize("../rivos/rivos.ext2")]#)
      end
      config:writef('},')

      -- cartridge flash drive
      config:writef('{"start":%d,', RIV_PADDR_CARTRIDGE)
      if #cartridge_filename > 0 then
        config:writef('"image_filename":"%s"', escape_json(cartridge_filename))
      else
        config:writef('"length":%d', 4096)
      end
      config:writef('},')

      -- event log flash drive
      config:writef('{"start":%d,"length":%d}', RIV_PADDR_REPLAYLOG, RIV_SIZE_REPLAYLOG)
    end
    config:writef('],')

    -- virtio devices
    config:writef('"virtio":[')
    local console_hvc: cint  = 0
    local has_virtio: boolean = false
    do
      -- console
      if interactive then
        config:writef('{"type":"console"}')
        console_hvc = 1
        has_virtio = true
      end
      -- network
      if network then
        if has_virtio then config:writef(',') end
        config:writef('{"type":"net-user"}')
        has_virtio = true
      end
      -- workspace
      if #workspace > 0 then
        if has_virtio then config:writef(',') end
        config:writef('{"type":"p9fs","tag":"workspace","host_directory":"%s"}', escape_json(workspace))
        has_virtio = true
      end
    end
    config:writef('],')

    -- bootargs
    local bootargs: string <close> = string.format("\z
      no4lvl quiet \z
      earlycon=sbi console=hvc%d \z
      rootfstype=ext2 root=/dev/pmem0 rw \z
      init=/usr/sbin/cartesi-init %s", console_hvc, escape_json(append_bootargs))

    -- dtb
    config:writef([["dtb":{"bootargs":"%s","init":"%s","entrypoint":"%s"},]],
      escape_json(bootargs), escape_json(init), escape_json(entrypoint))
    -- processor
    config:writef([["processor":{"iunrep":%d},]], has_virtio and 1 or 0)
    -- ram
    config:writef([["ram":{"image_filename":"%s","length":%d}]],
      escape_json(kernel_filename), ram_length)
  end
  config:writef('}')

  -- set runtime config
  local runtime_config: string = [[{"soft_yield":true}]]

  -- create the machine
  local self: rivemu_machine
  cm_assert!(cm_create_new(config:view(), runtime_config, &self.machine))

  -- write event log
  if #replaylog_filename > 0 then
    local file: filestream <close> = fn_assert!(io.open(replaylog_filename, 'rb'))
    local contents: string <close> = fn_assert!(file:read('a'))
    cm_assert!(cm_write_memory(self.machine, RIV_PADDR_REPLAYLOG, contents.data, contents.size))
  end

  -- write default kernel
  if #kernel_filename == 0 then
    self:uncompress_memory(RIV_PADDR_RAM, #[require'nelua.utils.fs'.readfile("../kernel/linux.bin.zz")]#)
  end

  -- write default os
  if #rootfs_filename == 0 then
    self:uncompress_memory(RIV_PADDR_ROOTFS, #[require'nelua.utils.fs'.readfile("../rivos/rivos.ext2.zz")]#)
  end

  return self
end

-- Destroy the machine.
function rivemu_machine:destroy(): void
  cm_delete(self.machine)
  $self = {}
end

-- Check if the machine is halted.
function rivemu_machine:is_halted(): boolean
  local halted: boolean
  cm_assert!(cm_read_iflags_H(self.machine, &halted))
  return halted
end

-- Get the machine root hash as a hexadecimal string.
function rivemu_machine:get_root_hash(): [32]byte
  local hash: [32]byte
  cm_assert!(cm_get_root_hash(self.machine, &hash))
  return hash
end

-- Read machine X register.
function rivemu_machine:read_x(i: int64): uint64
  local val: uint64
  cm_assert!(cm_read_reg(self.machine, CM_REG_X0 + (@int32)(i), &val))
  return val
end

-- Get machine mcycle.
function rivemu_machine:read_mcycle(): uint64
  local mcycle: uint64
  cm_assert!(cm_read_reg(self.machine, CM_REG_MCYCLE, &mcycle))
  return mcycle
end

-- Get machine halt status code.
function rivemu_machine:read_halt_exit_code(): uint64
  local htif_tohost: uint64
  cm_assert!(cm_read_reg(self.machine, CM_REG_HTIF_TOHOST, &htif_tohost))
  return (htif_tohost >> 1) & 0xff
end

-- Read machine memory.
function rivemu_machine:read_memory(paddr: uint64, dest: span(byte)): void
  cm_assert!(cm_read_memory(self.machine, paddr, dest.data, dest.size))
end

-- Write machine memory.
function rivemu_machine:write_memory(paddr: uint64, dest: span(byte)): void
  cm_assert!(cm_write_memory(self.machine, paddr, dest.data, dest.size))
end

-- Read machine virtual memory.
function rivemu_machine:read_virtual_memory(paddr: uint64, dest: span(byte)): void
  cm_assert!(cm_read_virtual_memory(self.machine, paddr, dest.data, dest.size))
end

-- Translate machine virtual address.
function rivemu_machine:translate_virtual_address(paddr: uint64): uint64
  local vaddr: uint64
  cm_assert!(cm_translate_virtual_address(self.machine, paddr, &vaddr))
  return vaddr
end

-- Translate and read machine virtual memory.
function rivemu_machine:translate_and_read_virtual_memory(vaddr: uint64, dest: span(byte)): void
  self:read_memory(self:translate_virtual_address(vaddr), dest)
end

-- Write machine virtual memory.
function rivemu_machine:write_virtual_memory(paddr: uint64, dest: span(byte)): void
  cm_assert!(cm_write_virtual_memory(self.machine, paddr, dest.data, dest.size))
end

-- Returns true if MMIO is ready to exchange data between driver and device.
function rivemu_machine:is_mmio_ready(): boolean
  return self.mmio_connected
end

-- Copy MMIO state from machine memory to host memory.
function rivemu_machine:_load_driver_mmio(): void
  assert(self.mmio_connected, 'mmio is not connected')
  if not self.in_softyield then return end
  local data: span(byte) = {data=(@*[0]byte)(&self.mmio_driver),size=#@riv_mmio_driver}
  self:read_virtual_memory(RIV_VADDR_MMIO_DRIVER, data)
end

-- Store MMIO state from host memory to machine memory.
function rivemu_machine:_store_device_mmio(): void
  assert(self.mmio_connected, 'mmio is not connected')
  if not self.in_softyield then return end
  local data: span(byte) = {data=(@*[0]byte)(&self.mmio_device),size=#@riv_mmio_device}
  self:write_virtual_memory(RIV_VADDR_MMIO_DEVICE, data)
end

-- Init MMIO link.
function rivemu_machine:_init_mmio(): void
  -- load MMIO from guest driver into host device
  self:_load_driver_mmio()
  -- copy header
  self.mmio_device.header = self.mmio_driver.header
  self.mmio_device.header.canary = RIV_CANARY_DEVICE
end

-- Reset MMIO link.
function rivemu_machine:_reset_mmio(): void
  if not self.mmio_connected then return end
  self.mmio_connected = false
  self.mmio_device.header = {}
end

-- Check if MMIO link still valid.
function rivemu_machine:_check_mmio(): boolean
  if not self.mmio_connected then return false end
  local check_header: riv_mmio_header = self.mmio_device.header
  check_header.canary = RIV_CANARY_DRIVER
  local driver_header: riv_mmio_header
  local data: span(byte) = {data=(@*[0]byte)(&driver_header),size=#@riv_mmio_header}
  self:read_virtual_memory(RIV_VADDR_MMIO_DRIVER, data)
  return driver_header == check_header
end

-- Find MMIO physical address and link it.
function rivemu_machine:_setup_mmio(): boolean
  self:_reset_mmio()
  local header: riv_mmio_header
  local data: span(byte) = {data=(@*[0]byte)(&header),size=#@riv_mmio_header}
  self:read_virtual_memory(RIV_VADDR_MMIO_DRIVER, data)
  if header.canary == RIV_CANARY_DRIVER then -- connected
    assert((header.version // 1000) == (RIV_VERSION // 1000), 'RIV device: unsupported RIV version')
    assert(header.features == 0, 'RIV device: unsupported RIV features')
    self.mmio_connected = true
    self:_init_mmio()
    return true
  end
  return false
end

-- Run the machine.
function rivemu_machine:run(mcycle_end: uint64): cm_break_reason
  -- store MMIO from host device into guest driver
  if self.in_softyield then
    self:_store_device_mmio()
  end
  -- run the machine
  local break_reason: cm_break_reason
  cm_assert!(cm_run(self.machine, mcycle_end, &break_reason))
  -- load driver MMIO
  if break_reason == CM_BREAK_REASON_YIELDED_SOFTLY then
    self.in_softyield = true
    if self:_check_mmio() then -- is the MMIO still valid?
      -- load MMIO from guest driver into host device
      self:_load_driver_mmio()
    elseif not self:_setup_mmio() then -- try to initialize it
      error('RIV device: unable to connect driver MMIO')
    end
  else
    self.in_softyield = false
    if break_reason ~= CM_BREAK_REASON_REACHED_TARGET_MCYCLE then
      -- for any other reason, MMIO becomes disconnected
      self:_reset_mmio()
    end
  end
  -- return break reason
  return break_reason
end

-- Global machine.
global machine: rivemu_machine
