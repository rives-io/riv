-- This file contains code related to input and output cards.

require 'io'
require 'macros'
require 'keccak'
require '.machine'

global rivemu_iocard: type = @record{}

local outbuffer: [RIV_SIZE_OUTCARD]byte
local outcard_data: span(byte)
local outhist: stringbuilder
local outhist_tracking: boolean
local outhist_tracking_json: boolean

function rivemu_iocard.setup(): void
  outcard_data.data = &outbuffer[0]
end

function rivemu_iocard.reset(): void
  outcard_data.size = 0
  outhist_tracking = false
  outhist_tracking_json = false
  memory.zero(&outbuffer[0], RIV_SIZE_OUTCARD)
end

function rivemu_iocard.shutdown(): void
  rivemu_iocard.reset()
end

function rivemu_iocard.update_outcard(): void
  outcard_data.size = math.min(machine.mmio_driver.outcard_len, RIV_SIZE_OUTCARD)
  machine:translate_and_read_virtual_memory(RIV_VADDR_OUTCARD, outcard_data)

  if outhist_tracking then
    local outcard_str: string = {data=outcard_data.data, size=outcard_data.size}
    if machine.mmio_driver.frame == 0 then
      outhist_tracking_json = #outcard_str >= 4 and outcard_str:subview(1,4) == 'JSON'
    end

    if outhist_tracking_json then
      if machine.mmio_driver.frame == 0 then
        outhist:write('[\n')
      else
        outhist:write(',\n')
      end
      outhist:write(outcard_str:subview(5))
    else
      outhist:write(outcard_str)
    end
  end
end

function rivemu_iocard.get_outcard_data(): span(byte)
  return outcard_data
end

function rivemu_iocard.start_tracking_outhist(): void
  outhist_tracking = true
  outhist:clear()
end

function rivemu_iocard.stop_tracking_outhist(): void
  if not outhist_tracking then return end
  if outhist_tracking_json then
    outhist:write('\n]\n')
    outhist_tracking_json = false
  end
  outhist_tracking = false
end

function rivemu_iocard.load_incard(filename: string): void
  local file: filestream <close> = fn_assert!(io.open(filename, 'rb'))
  local contents: string <close> = fn_assert!(file:read('a'))
  local data: span(byte) = {data=contents.data, size=math.min(RIV_SIZE_INCARD, contents.size)}
  machine:write_virtual_memory(RIV_VADDR_INCARD, data)
  machine.mmio_device.incard_len = (@uint32)(data.size)
  io.printf("[RIVEMU] Loaded input card '%s'\n", filename)
end

function rivemu_iocard.save_outhash(filename: string): void
  local file: filestream <close> = fn_assert!(io.open(filename, 'wb'))
  local hash: string <close> = hexhash(sha256hash(outcard_data))
  fn_assert!(file:write(hash))
  io.printf("[RIVEMU] Saved output card hash '%s'\n", filename)
end

function rivemu_iocard.save_outcard(filename: string): void
  local file: filestream <close> = fn_assert!(io.open(filename, 'wb'))
  fn_assert!(file:write(outcard_data))
  io.printf("[RIVEMU] Saved output card data '%s'\n", filename)
end

function rivemu_iocard.save_outhist(filename: string): void
  local file: filestream <close> = fn_assert!(io.open(filename, 'wb'))
  fn_assert!(file:write(outhist:view()))
  io.printf("[RIVEMU] Saved output card history '%s'\n", filename)
end

function rivemu_iocard.print_outcard(): void
  local contents: string = {data=outcard_data.data, size=outcard_data.size}
  if outcard_data.size >= 64 then
    io.printf("[RIVEMU] Outcard:\n%s\n", contents)
  else
    io.printf("[RIVEMU] Outcard: %s\n", contents)
  end
end

function rivemu_iocard.print_outcard_checksum(): void
  local contents: string = {data=outcard_data.data, size=outcard_data.size}
  local hash: string <close> = hexhash(sha256hash(outcard_data))
  io.printf("[RIVEMU] Outcard sha256sum:\n%s\n", hash, contents)
end

function rivemu_iocard.verify_outcard_checksum(checksum: string): void
  local contents: string = {data=outcard_data.data, size=outcard_data.size}
  local hash: string <close> = hexhash(sha256hash(outcard_data))
  if hash == checksum then
    io.printf("[RIVEMU] Outcard sha256sum verification SUCCEEDED!\n")
  else
    io.printf("[RIVEMU] Outcard sha256sum verification FAILED!\nExpected: %s\n But got: %s\n", checksum, hash)
    os.exit(1)
  end
end
