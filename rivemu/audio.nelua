-- This file contains code related to the audio subsystem.

-- miniaudio worklets
##[[
if ccinfo.is_emscripten then
  -- cdefine 'MA_ENABLE_AUDIO_WORKLETS'
  -- cflags '-sAUDIO_WORKLET=1 -sWASM_WORKERS=1'
  -- cflags '-sASYNCIFY'
end
]]

require 'vector'
require 'hashmap'
require 'miniaudio'
require '.machine'
require '.mathx'

local engine: ma_engine
--------------------------------------------------------------------------------

-- Macro for quick error handling miniaudio errors.
## local function ma_assert(callnode)
  local result: ma_result = #[callnode]#
  if result ~= MA_SUCCESS then
    error(#[callnode[2][1]..': ']#..ma_result_description(result))
  end
## end

--------------------------------------------------------------------------------

function riv_waveform_desc:fill_defaults()
  self.attack = math.max(self.attack, 1e-6)
  self.decay = math.max(self.decay, 1e-6)
  self.sustain = math.max(self.sustain, 1e-6)
  self.release = math.max(self.release, 1e-6)
  if self.amplitude == 0 then self.amplitude = 0.25_f32 end
  if self.sustain_level == 0 then self.sustain_level = 1.0_f32 end
  if self.end_frequency == 0 then self.end_frequency = self.start_frequency end
  if self.duty_cycle == 0 then self.duty_cycle = 0.5_f32 end
end

-- Compute a sample point for the wave.
function riv_waveform_desc:sample(time: float32, time_offset: float32): float32 <inline>
  -- compute amplitude from ADSR
  local a_duration: float32 = self.attack
  local ad_duration: float32 = a_duration + self.decay
  local ads_duration: float32 = ad_duration + self.sustain
  local adsr_duration: float32 = ads_duration + self.release
  local attack: float32 = mathx.linearstep(0.0_f32, a_duration, time)
  local release: float32 = mathx.linearstep(adsr_duration, ads_duration, time)
  local decay: float32 = mathx.mix(1.0_f32, self.sustain_level, mathx.linearstep(self.attack, ad_duration, time))
  local amplitude: float32 = self.amplitude * attack * decay * release
  -- compute frequency
  local freq: float32 = mathx.mix(self.start_frequency, self.end_frequency, time / (2*adsr_duration))
  local x: float32 = time * freq + time_offset * self.start_frequency
  -- phase modulation
  -- x = x + mathx.qsin((time + time_offset) * 10 * mathx.TAU)*0.5
  -- compute wave
  local wave: float32
  switch self.type do
  case RIV_WAVEFORM_SINE then
    wave = mathx.qsin(x * mathx.TAU) -- sine
  case RIV_WAVEFORM_SQUARE then
    local d1: float32 = self.duty_cycle
    local d2: float32 = 0.5_f32 - d1
    wave = 2*(math.fract(x+d1)-math.fract(x)+d2)-1 -- square
  case RIV_WAVEFORM_TRIANGLE then
    wave = math.abs(4*math.fract(x-0.25_f32)-2)-1 -- triangle
  case RIV_WAVEFORM_SAWTOOTH then
    wave = 2*math.fract(x-0.5_f32)-1 -- sawtooth
  case RIV_WAVEFORM_TILTED_SAWTOOTH then
    local K: float32 <comptime> = 8.0_f32
    local y: float32 = (1/(2*K)) - x
    local ascend: float32 = math.fract(y*K)*math.floor(math.fract(y+((K-1)/K)) + (1/K))
    local descend: float32 = (K/(K-1))*math.fract(-y)*math.floor(math.fract(y) + ((K-1)/K))
    wave = 2*(ascend+descend)-1
  case RIV_WAVEFORM_NOISE then
    if freq >= 48000 then -- white noise
      wave = mathx.hash1(x)
    else
      wave = mathx.valuenoise(x * 16) -- value noise
    end
    wave = 2*wave - 1
  case RIV_WAVEFORM_PULSE then
    local d = 0.5_f32/(1-self.duty_cycle)
    local t = math.mod(x*d, d) -- infinite repetition
    local p = 8*t*(1-2*t) -- parabola
    wave = 2*math.max(p, 0_f32) - 1
  case RIV_WAVEFORM_ORGAN then
    local xtau = x * mathx.TAU
    wave = (mathx.qsin(xtau) + mathx.qsin(2*xtau) + mathx.qsin(3*xtau))*0.4
  else
    wave = 0
  end
  -- combine amplitude and wave
  return math.clamp(amplitude * wave, -1.0_f32, 1.0_f32)
end

--------------------------------------------------------------------------------
-- WaveForm

local WaveForm: type = @record{
  ds: ma_data_source_base,
  time_offset: float32,
  sample_rate_inverse: float32,
  frame: uint64,
  length: uint64,
  sample_rate: uint32,
  waveform_desc: riv_waveform_desc,
}

function WaveForm:_read(frames_out: *[0]float32, frame_count: uint64, frames_read: *uint64): ma_result
  -- ignore invalid arguments
  if self == nilptr or frame_count == 0 then return MA_INVALID_ARGS end
  -- end of sound?
  if self.frame > self.length then
    memory.zero(frames_out, frame_count*#@float32)
    $frames_read = 0
    return MA_AT_END
  end
  if frames_out ~= nilptr and frames_read ~= nilptr then
    if self.frame == 0then
      local start_pcm_frame: uint64 = ma_engine_get_time_in_pcm_frames(&engine)
      self.time_offset = (start_pcm_frame % self.sample_rate) * self.sample_rate_inverse + self.waveform_desc.delay
    end
    if self.frame + frame_count < self.waveform_desc.delay * self.sample_rate then
      -- skip calculation if not started yet (optimization)
      memory.zero(frames_out, frame_count*#@float32)
    else
      -- localize variables for hot loop
      local sample_rate_inverse: float32 = self.sample_rate_inverse
      local wave: riv_waveform_desc = self.waveform_desc
      local frame: uint64 = self.frame
      local time_offset: float32 = self.time_offset
      -- fill the sample buffer
      for i: uint64=0,<frame_count do
        local time: float32 = (frame + i) * sample_rate_inverse
        time = math.max(time - wave.delay, 0_f32)
        frames_out[i] = wave:sample(time, time_offset)
      end
    end
    $frames_read = frame_count
    self.frame = self.frame + frame_count
  end
  return MA_SUCCESS
end

function WaveForm:_seek(frame: uint64): ma_result
  self.frame = math.min(frame, self.length)
  return MA_SUCCESS
end

function WaveForm:_get_data_format(format: *ma_format, channels: *uint32, sample_rate: *uint32, channel_map: *ma_channel, channel_map_cap: csize): ma_result
  $format = ma_format_f32
  $channels = 1
  $sample_rate = self.sample_rate
  ma_channel_map_init_standard(ma_standard_channel_map_default, channel_map, channel_map_cap, 1)
  return MA_SUCCESS
end

function WaveForm:_get_cursor(cursor: *uint64): ma_result
  $cursor = self.frame
  return MA_SUCCESS
end

function WaveForm:_get_length(length: *uint64): ma_result
  $length = self.length
  return MA_SUCCESS
end

local monowave_data_source_vtable: ma_data_source_vtable = {
  onRead = (@function(pDataSource: *ma_data_source, pFramesOut: pointer, frameCount: ma_uint64, pFramesRead: *ma_uint64): ma_result)(WaveForm._read),
  onSeek = (@function(pDataSource: *ma_data_source, frameIndex: ma_uint64): ma_result)(WaveForm._seek),
  onGetDataFormat = (@function(pDataSource: *ma_data_source, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: csize): ma_result)(WaveForm._get_data_format),
  onGetCursor = (@function(pDataSource: *ma_data_source, pCursor: *ma_uint64): ma_result)(WaveForm._get_cursor),
  onGetLength = (@function(pDataSource: *ma_data_source, pLength: *ma_uint64): ma_result)(WaveForm._get_length),
  onSetLooping = nilptr
}

function WaveForm:init(sample_rate: uint32, waveform_desc: riv_waveform_desc): ma_result
  waveform_desc:fill_defaults()
  self.waveform_desc = waveform_desc
  self.sample_rate = sample_rate
  self.sample_rate_inverse = 1.0_f32 / sample_rate
  local duration: float64 = self.waveform_desc.delay +
                            self.waveform_desc.attack +
                            self.waveform_desc.decay +
                            self.waveform_desc.sustain +
                            self.waveform_desc.release
  self.length = math.iceil(duration * sample_rate)
  local data_source_config: ma_data_source_config = ma_data_source_config_init()
  data_source_config.vtable = &monowave_data_source_vtable
  ma_assert!(ma_data_source_init(&data_source_config, &self.ds))
  return MA_SUCCESS
end

function WaveForm:uninit(): void
  ma_data_source_uninit(&self.ds)
end

--------------------------------------------------------------------------------
-- Silence

local Silence: type = @record{
  ds: ma_data_source_base,
}

function Silence:_read(frames_out: *[0]float32, frame_count: uint64, frames_read: *uint64): ma_result
  return MA_AT_END
end

function Silence:_get_data_format(format: *ma_format, channels: *uint32, sample_rate: *uint32, channel_map: *ma_channel, channel_map_cap: csize): ma_result
  $format = ma_format_f32
  $channels = 1
  $sample_rate = 48000
  ma_channel_map_init_standard(ma_standard_channel_map_default, channel_map, channel_map_cap, 1)
  return MA_SUCCESS
end

local silence_data_source_vtable: ma_data_source_vtable = {
  onRead = (@function(pDataSource: *ma_data_source, pFramesOut: pointer, frameCount: ma_uint64, pFramesRead: *ma_uint64): ma_result)(Silence._read),
  onSeek = nilptr,
  onGetDataFormat = (@function(pDataSource: *ma_data_source, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: csize): ma_result)(Silence._get_data_format),
  onGetCursor = nilptr,
  onGetLength = nilptr,
  onSetLooping = nilptr
}

function Silence:init(sample_rate: uint32): ma_result
  local data_source_config: ma_data_source_config = ma_data_source_config_init()
  data_source_config.vtable = &silence_data_source_vtable
  ma_assert!(ma_data_source_init(&data_source_config, &self.ds))
  return MA_SUCCESS
end

function Silence:uninit(): void
  ma_data_source_uninit(&self.ds)
end

--------------------------------------------------------------------------------
-- Sound

local Sound: type = @record{
  asound: *ma_sound,
  abuffer: *ma_audio_buffer,
  adecoder: *ma_decoder,
  waveform: *WaveForm,
  stopped: boolean,
}

function Sound:destroy(): void
  ma_sound_uninit(self.asound)
  delete(self.asound)
  if self.abuffer then
    ma_audio_buffer_uninit(self.abuffer)
    delete(self.abuffer)
  end
  if self.adecoder then
    ma_decoder_uninit(self.adecoder)
    delete(self.adecoder)
  end
  delete(self.waveform)
  $self = {}
end

function Sound:is_finished(now: float64): boolean
  local time: uint64
  ma_assert!(ma_sound_get_cursor_in_pcm_frames(self.asound, &time))
  local playing: boolean = ma_sound_is_playing(self.asound) == MA_TRUE
  if not playing and time > 0 then
    return true -- ended
  end
  return self.stopped
end

--------------------------------------------------------------------------------

local DEFAULT_SAMPLE_RATE <comptime> = 48000
local DEFAULT_CHANNELS <comptime> = 2
local DEFAULT_PERIOD_SIZE <comptime> = DEFAULT_SAMPLE_RATE // 20
local DEFAULT_VOLUME <comptime> = 0.8

-- Audio subsystem.
global rivemu_audio: type = @record{}

-- Audio subsystem state.
local buffers: hashmap(uint64, riv_soundbuffer_desc)
local sounds: hashmap(uint64, Sound)
local releasing_sounds: vector(Sound)
local global_pitch: float64
local global_sample_rate: uint64
local global_pcm_frame: uint64
local global_pcm_frame_rem: float64
local last_engine_sync_pcm_frame: uint64
local silence: Silence
local silence_asound: ma_sound
local audio_started: boolean

-- Start audio thread.
function rivemu_audio.start(): void
  if audio_started then return end
  ma_assert!(ma_engine_start(&engine))
  ma_assert!(ma_sound_start(silence_asound))
  audio_started = true
end

-- Stop audio thread.
function rivemu_audio.stop(): void
  if not audio_started then return end
  ma_assert!(ma_sound_stop(silence_asound))
  ma_assert!(ma_engine_stop(&engine))
  audio_started = false
end

-- Initialize audio subsystem.
function rivemu_audio.setup(): void
  -- initialize miniaudio
  local config: ma_engine_config = ma_engine_config_init()
  config.sampleRate = DEFAULT_SAMPLE_RATE
  config.channels = DEFAULT_CHANNELS
  config.periodSizeInFrames = DEFAULT_PERIOD_SIZE
  config.noAutoStart = MA_TRUE
  global_pitch = 1
  ma_assert!(ma_engine_init(&config, &engine))
  ma_engine_set_volume(&engine, DEFAULT_VOLUME)
  global_sample_rate = ma_engine_get_sample_rate(&engine)
  -- create dummy silence sound to keep audio global time incrementing
  ma_assert!(Silence.init(&silence, global_sample_rate))
  ma_assert!(ma_sound_init_from_data_source(&engine, &silence.ds, MA_SOUND_FLAG_NO_SPATIALIZATION, nilptr, &silence_asound))
  ma_sound_set_looping(&silence_asound, MA_TRUE)
  rivemu_audio.start()
  global_pcm_frame = DEFAULT_PERIOD_SIZE
  last_engine_sync_pcm_frame = 0
  global_pcm_frame_rem = 0
end

function rivemu_audio.set_pitch(pitch: float64): void
  global_pitch = pitch
end

-- Reset audio subsystem.
function rivemu_audio.reset(): void
  rivemu_audio.stop()
  -- destroy sounds
  for id: uint64, sound: *Sound in mpairs(sounds) do
    sound:destroy()
  end
  sounds:destroy()
  -- destroy releasing sounds
  for id: uint64, sound: *Sound in mpairs(releasing_sounds) do
    sound:destroy()
  end
  releasing_sounds:destroy()
  -- destroy sound buffers
  for id: uint64, buffer: *riv_soundbuffer_desc in mpairs(buffers) do
    delete((@span(byte)){data=buffer.data.data, size=buffer.data.size})
  end
  buffers:destroy()
  -- rewind time
  global_pcm_frame = DEFAULT_PERIOD_SIZE
  last_engine_sync_pcm_frame = 0
  global_pcm_frame_rem = 0
  ma_assert!(ma_engine_set_time_in_pcm_frames(&engine, 0))
end

-- Terminate audio subsystem.
function rivemu_audio.shutdown(): void
  rivemu_audio.reset()
  -- destroy silence
  silence:uninit()
  ma_sound_uninit(&silence_asound)
  -- destroy miniaudio
  ma_engine_uninit(&engine)
end

-- Poll audio subsystem.
function rivemu_audio.poll(): void
  -- remove sounds that ended
  local now: float64 = os.now()
  for id: uint64, sound: *Sound in mpairs(sounds) do
    if sound:is_finished(now) then
      sound:destroy()
      sounds:remove(id)
    end
  end
  for id: uint64, sound: *Sound in mpairs(releasing_sounds) do
    if sound:is_finished(now) then
      sound:destroy()
    end
  end
  releasing_sounds:clear()
end

--------------------------------------------------------------------------------

local function handle_make_soundbuffer(desc: riv_soundbuffer_desc): void
  assert(not buffers:has(desc.id), 'sound buffer id is already taken')
  local off: usize = (@usize)(desc.data.data)
  local data: span(byte) = new(@byte, desc.data.size)
  machine:read_virtual_memory(RIV_VADDR_TXBUFFER + off, data)
  desc.data.data = data.data
  buffers[desc.id] = desc
end

local function handle_sound(desc: riv_sound_desc): void
  if desc.buffer_id ~= 0 then -- start new sound
    if desc.seek == -1 then return end -- silently ignore sound to be stopped
    local buffer: *riv_soundbuffer_desc = buffers:peek(desc.buffer_id)
    assert(buffer, 'invalid sound buffer id')
    local abuffer: *ma_audio_buffer
    local adecoder: *ma_decoder
    local ds: *ma_data_source
    switch buffer.format do
    case RIV_SOUNDFORMAT_U8 then fallthrough
    case RIV_SOUNDFORMAT_S16 then fallthrough
    case RIV_SOUNDFORMAT_S24 then fallthrough
    case RIV_SOUNDFORMAT_S32 then fallthrough
    case RIV_SOUNDFORMAT_F32 then
      local sample_size: uint64 = (@uint64)(math.min(buffer.format, 4) * buffer.channels)
      local size_in_frames: uint64 = buffer.data.size // sample_size
      abuffer = new(@ma_audio_buffer)
      local aconfig: ma_audio_buffer_config = ma_audio_buffer_config_init(buffer.format, buffer.channels, size_in_frames, buffer.data.data, nilptr)
      aconfig.sampleRate = buffer.sample_rate
      ma_assert!(ma_audio_buffer_init(&aconfig, abuffer))
      ds = &abuffer.ref.ds
    case RIV_SOUNDFORMAT_WAV then fallthrough
    case RIV_SOUNDFORMAT_FLAC then fallthrough
    case RIV_SOUNDFORMAT_MP3 then fallthrough
    case RIV_SOUNDFORMAT_OGG then
      adecoder = new(@ma_decoder)
      local aconfig: ma_decoder_config = ma_decoder_config_init_default()
      aconfig.encodingFormat = buffer.format - RIV_SOUNDFORMAT_WAV + 1
      ma_assert!(ma_decoder_init_memory(buffer.data.data, buffer.data.size, &aconfig, adecoder))
      ds = &adecoder.ds
    else
      error('invalid sound format')
    end
    local asound: *ma_sound = new(@ma_sound)
    local flags: uint32 = MA_SOUND_FLAG_NO_SPATIALIZATION
    local pitch: float64 = (desc.pitch > 0 and desc.pitch or 1.0) * global_pitch
    if desc.pitch <= 0 and pitch == 1.0 then flags = flags | MA_SOUND_FLAG_NO_PITCH end
    ma_assert!(ma_sound_init_from_data_source(&engine, ds, flags, nilptr, asound))
    local sample_rate: uint32
    ma_assert!(ma_sound_get_data_format(asound, nilptr, nilptr, &sample_rate, nilptr, 0))
    ma_sound_set_volume(asound, desc.volume)
    if desc.pan ~= 0 then ma_sound_set_pan(asound, desc.pan) end
    if pitch ~= 1.0 then ma_sound_set_pitch(asound, pitch) end
    if desc.seek > 0 then
      local seek_frame: uint64 = math.ifloor(sample_rate * desc.seek)
      ma_assert!(ma_sound_seek_to_pcm_frame(asound, seek_frame))
    end
    -- start delay
    local start_time: uint64 = ma_engine_get_time_in_pcm_frames(&engine) + math.ifloor(desc.delay * global_sample_rate * global_pitch)
    if desc.delay > 0 then
      ma_sound_set_start_time_in_pcm_frames(asound, start_time)
    end
    -- fade in
    if desc.fade_in > 0 then
      local fade_in_time: uint64 = math.ifloor(desc.fade_in * global_sample_rate * global_pitch)
      ma_sound_set_fade_in_pcm_frames(asound, 0.0, desc.volume, desc.fade_in)
    end
    -- duration
    if desc.duration > 0 then
      ma_sound_set_looping(asound, MA_TRUE)
      local end_time: uint64 = start_time + math.ifloor(desc.duration * global_sample_rate * global_pitch)
      -- fade out
      if desc.fade_out > 0 then
        local fade_out_time: uint64 = math.ifloor(desc.fade_out * global_sample_rate * global_pitch)
        ma_sound_set_stop_time_with_fade_in_pcm_frames(asound, end_time, fade_out_time)
      else
        ma_sound_set_stop_time_in_pcm_frames(asound, end_time)
      end
    elseif desc.duration == -1 then
      ma_sound_set_looping(asound, MA_TRUE)
    end
    -- release sound with same id
    local prev_sound: *Sound = sounds:peek(desc.id)
    if prev_sound then
      local fade_out_time: uint64 = math.ifloor(0.05 * global_sample_rate * global_pitch)
      ma_assert!(ma_sound_stop_with_fade_in_pcm_frames(prev_sound.asound, fade_out_time))
      releasing_sounds:push($prev_sound)
      sounds:remove(desc.id)
    end
    -- start
    ma_assert!(ma_sound_start(asound))
    sounds[desc.id] = Sound{=asound, =abuffer, =adecoder}
  else -- change sound
    local sound: *Sound = sounds:peek(desc.id)
    if not sound then return end -- silently ignore
    if desc.seek == -1 then -- stop sound
      if desc.fade_out ~= 0 then
        local fade_out_time: uint64 = math.ifloor(desc.fade_out * global_sample_rate * global_pitch)
        ma_assert!(ma_sound_stop_with_fade_in_pcm_frames(sound.asound, fade_out_time))
      else
        ma_assert!(ma_sound_stop(sound.asound))
        sound.stopped = true
      end
    else -- update sound
      ma_sound_set_volume(sound.asound, desc.volume)
      ma_sound_set_pan(sound.asound, desc.pan)
      if desc.pitch > 0 then
        ma_sound_set_pitch(sound.asound, desc.pitch * global_pitch)
      end
    end
  end
end

local function handle_waveform(desc: riv_waveform_desc, align_start: boolean): void
  local waveform: *WaveForm = new(@WaveForm)
  local start_pcm_frame: uint64 = 0
  if align_start then
    -- we have to delay outside and inside the audio thread
    -- to make sound behave perfectly
    start_pcm_frame = global_pcm_frame - (global_pcm_frame % DEFAULT_PERIOD_SIZE) + (DEFAULT_PERIOD_SIZE // 60)
    desc.delay = desc.delay + (global_pcm_frame % DEFAULT_PERIOD_SIZE) / DEFAULT_SAMPLE_RATE
  end
  ma_assert!(WaveForm.init(waveform, global_sample_rate, desc))
  local flags: uint32 = MA_SOUND_FLAG_NO_SPATIALIZATION
  if global_pitch == 1.0 then
    flags = flags | MA_SOUND_FLAG_NO_PITCH
  end
  local asound: *ma_sound = new(@ma_sound)
  ma_assert!(ma_sound_init_from_data_source(&engine, &waveform.ds, flags, nilptr, asound))
  if desc.pan ~= 0 then
    ma_sound_set_pan(asound, desc.pan)
  end
  if global_pitch ~= 1.0 then
    ma_sound_set_pitch(asound, global_pitch)
  end
  -- release sound with same id
  local prev_sound: *Sound = sounds:peek(desc.id)
  if prev_sound then
    local fade: float32 = 0.05
    if prev_sound.waveform then
      fade = math.clamp(prev_sound.waveform.waveform_desc.release, 0, 1.0)
    end
    local fade_out_time: uint64 = math.ifloor(fade * global_sample_rate * global_pitch)
    if start_pcm_frame > 0 then
      ma_sound_set_stop_time_with_fade_in_pcm_frames(prev_sound.asound, start_pcm_frame + fade_out_time, fade_out_time)
    else
      ma_sound_stop_with_fade_in_pcm_frames(prev_sound.asound, fade_out_time)
    end
    releasing_sounds:push($prev_sound)
    sounds:remove(desc.id)
  end
  if start_pcm_frame > 0 then
    ma_sound_set_start_time_in_pcm_frames(asound, start_pcm_frame)
  end
  ma_assert!(ma_sound_start(asound))
  sounds[desc.id] = Sound{=asound, =waveform}
end

function rivemu_audio.start_boot_sound()
  handle_waveform({
    id = 1,
    type = RIV_WAVEFORM_TRIANGLE,
    delay = 0/8,
    attack = 0.01,
    decay = 1/8.0,
    release = 0.01,
    start_frequency = 440.0,
    amplitude = 0.1,
    sustain_level = 1,
  }, false)
  handle_waveform({
    id = 2,
    type = RIV_WAVEFORM_TRIANGLE,
    delay = 1/8,
    attack = 0.01,
    decay = 1/8.0,
    release = 0.01,
    start_frequency = 2*440.0,
    amplitude = 0.1,
    sustain_level = 1,
  }, false)
  handle_waveform({
    id = 3,
    type = RIV_WAVEFORM_TRIANGLE,
    delay = 2/8.0,
    attack = 0.01,
    decay = 1/8.0,
    release = 0.02,
    start_frequency = 4*440.0,
    amplitude = 0.1,
    sustain_level = 1,
  }, false)
end

-- Control audio subsystem.
function rivemu_audio.poll_commands(): void
  for i: usize=0,<machine.mmio_driver.command_len do
    local command: riv_command = machine.mmio_driver.commands[i]
    switch command.type do
    case RIV_COMMAND_MAKE_SOUNDBUFFER then
      handle_make_soundbuffer(command.desc.soundbuffer)
    case RIV_COMMAND_DESTROY_SOUNDBUFFER then
      -- handle_destroy_soundbuffer(command.desc.soundbuffer.id)
    case RIV_COMMAND_SOUND then
      handle_sound(command.desc.sound)
    case RIV_COMMAND_WAVEFORM then
      handle_waveform(command.desc.waveform, true)
    else
      -- ignore
    end
  end
end

function rivemu_audio.advance_pcm_frame(target_update_fps: float64)
  local advance_pcm_frames: float64 = DEFAULT_SAMPLE_RATE / target_update_fps
  local advance_pcm_frames_int: int64 = math.ifloor(advance_pcm_frames)
  if advance_pcm_frames_int > 0 and DEFAULT_SAMPLE_RATE % advance_pcm_frames_int ~= 0 then
    global_pcm_frame_rem = global_pcm_frame_rem + (advance_pcm_frames - advance_pcm_frames_int)
    if math.abs(global_pcm_frame_rem - math.round(global_pcm_frame_rem)) <= 1e-4 then
      advance_pcm_frames_int = advance_pcm_frames_int + math.iround(global_pcm_frame_rem)
      global_pcm_frame_rem = 0
    end
  end
  global_pcm_frame = global_pcm_frame + advance_pcm_frames_int
end

function rivemu_audio.sync_pcm_frame(target_update_fps: float64)
  local engine_pcm_frame = ma_engine_get_time_in_pcm_frames(&engine)
  if engine_pcm_frame > 0 and
         engine_pcm_frame ~= last_engine_sync_pcm_frame and
         (engine_pcm_frame % DEFAULT_PERIOD_SIZE == 0) then
    last_engine_sync_pcm_frame = engine_pcm_frame
    local delta: int64 = int64(engine_pcm_frame) - int64(global_pcm_frame)
    local advance_pcm_frames: float64 = math.ifloor(DEFAULT_SAMPLE_RATE / target_update_fps)
    if math.abs(delta) > math.max(DEFAULT_PERIOD_SIZE, DEFAULT_PERIOD_SIZE + advance_pcm_frames) then -- audio time is out of sync
      global_pcm_frame = engine_pcm_frame
    end
  end
end
