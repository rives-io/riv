#!/bin/sh

usage() {
 echo "Usage: $0 -Ospeed|-Osize|-Odebug|-Osanitize [--cflags] [--ldflags]"
 echo "Options:"
 echo "  -Ospeed          Optimize for code speed, while retaining good code size."
 echo "  -Osize           Optimize for code size, while retaining good code speed."
 echo "  -Odebug          Optimize for debug, while retaining fair code speed and size."
 echo "  -Osanitize       Optimize for debug and enable sanitizer."
 echo "  --cflags         Show C flags"
 echo "  --ldflags        Show linker flags"
 echo "  --static-libriv  Link libriv statically"
 echo ""
 echo "If neither --cflags or --ldflags is supplied, then both are shown."
}

handle_options() {
  while [ $# -gt 0 ]; do
    case $1 in
      -h | --help)
        usage
        exit 0
        ;;
      -Ospeed)
        mode=speed
        ;;
      -Osize)
        mode=size
        ;;
      -Odebug)
        mode=debug
        ;;
      -Osanitize)
        mode=debug
        sanitize=true
        ;;
      --cflags)
        show_cflags=y
        ;;
      --ldflags)
        show_ldflags=y
        ;;
      --static-libriv)
        static_libriv=y
        ;;
      *)
        echo "Invalid option: $1" >&2
        usage
        exit 1
        ;;
    esac
    shift
  done
}

handle_options "$@"

if [ -z "$mode" ]; then
    usage
    exit 1
fi

# make build more reproducible
LDFLAGS="-Wl,--build-id=none -Wl,--sort-common"

[ "$mode" = "speed" ] && CFLAGS="-O2 -DNDEBUG"
[ "$mode" = "size" ] && CFLAGS="-Os -DNDEBUG"
[ "$mode" = "debug" ] && CFLAGS="-Og -g -fno-omit-frame-pointer"
[ "$mode" != "debug" ] && LDFLAGS="$LDFLAGS -Wl,-O1"

# fast floating point
[ "$mode" != "debug" ] && CFLAGS="$CFLAGS -ffast-math"

# warn the user about possible errors
CFLAGS="$CFLAGS -Wall -Wextra -Wshadow"

# minimize undefined behavior
CFLAGS="$CFLAGS -fno-strict-overflow -fno-strict-aliasing -ftrivial-auto-var-init=zero"

# try to detect stack overflow
[ "$mode" == "debug" ] && CFLAGS="$CFLAGS -fstack-protector-strong -fstack-clash-protection"

# sanitizer flags
[ "$sanitize" == "true" ] && CFLAGS="$CFLAGS -fsanitize=undefined,address,float-divide-by-zero,float-cast-overflow -fno-sanitize-recover=all"

# remove stack guards
[ "$mode" != "debug" ] && CFLAGS="$CFLAGS -fno-stack-protector"

# make final binary smaller
[ "$mode" != "debug" ] && LDFLAGS="$LDFLAGS -Wl,--gc-sections -Wl,--as-needed -Wl,--hash-style=gnu"

# link optimization
[ "$mode" != "size" ] && LDFLAGS="$LDFLAGS -Wl,-z,now"

# force exporting symbols for backtraces
[ "$mode" == "debug" ] && LDFLAGS="$LDFLAGS -Wl,-z,relro -rdynamic"

# link RIV library
[ "$static_libriv" == "y" ] && LDFLAGS="$LDFLAGS -l:libriv.a" || LDFLAGS="$LDFLAGS -lriv"

# print
if [ "$show_cflags$show_ldflags" = "yy" ] || [ "$show_cflags$show_ldflags" = "" ]; then
    echo "$CFLAGS $LDFLAGS"
elif [ "$show_cflags" = "y" ]; then
    echo "$CFLAGS"
elif [ "$show_ldflags" = "y" ]; then
    echo "$LDFLAGS"
fi
